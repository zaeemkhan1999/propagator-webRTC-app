directive @tag(
  name: String!
) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

type Query {
  ads_getAds(entityId: Int!): SingleResponseBaseOfAdsDto
  ads_getAdses: ListResponseBaseOfAdsDto
  ads_getAdsesForSlider(ignoredAdsIds: [Int!]): ListResponseBaseOfAdsDto
  articleComment_getArticleComment(
    entityId: Int!
  ): SingleResponseBaseOfArticleCommentDto
  articleComment_getArticleComments(
    loadDeleted: Boolean!
  ): ListResponseBaseOfArticleCommentDto
  get(entityId: Int!): SingleResponseBaseOfArticleLike
  items: ListResponseBaseOfArticleLike
  article_getArticle(entityId: Int!): SingleResponseBaseOfArticleDto
  article_getArticles: ListResponseBaseOfArticleDto
  article_getArticlesInAdvanceWay(
    getArticleType: GetArticleType!
  ): ListResponseBaseOfArticleDto
  post_getTopArticles(from: DateTime!): ListResponseBaseOfArticleDto
  article_getFollowersArticles: ListResponseBaseOfArticleDto
  article_getLikedArticles: ListResponseBaseOfArticleLikeDto
  article_getArticleViews: ListResponseBaseOfUserViewArticle
  article_getSavedArticles: ListResponseBaseOfSaveArticleDto
  block_getBlock(entityId: Int!): SingleResponseBaseOfBlockUser
  block_getBlocks: ListResponseBaseOfBlockUser
  comment_getComment(entityId: Int!): SingleResponseBaseOfCommentDto
  comment_getComments(loadDeleted: Boolean!): ListResponseBaseOfCommentDto
  dashboard_getAdminDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
  ): ResponseBaseOfGetDashboardInfoDto
  dashboard_getPostLikesDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
    postId: Int!
  ): ResponseBaseOfDashboardInfo
  dashboard_getPostsCommentsDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
    postId: Int!
  ): ResponseBaseOfDashboardInfo
  dashboard_getPostsViewsDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
    postId: Int!
  ): ResponseBaseOfDashboardInfo
  dashboard_getPostsSavesDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
    postId: Int!
  ): ResponseBaseOfDashboardInfo
  dashboard_getArticlesLikesDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
    articleId: Int!
  ): ResponseBaseOfDashboardInfo
  dashboard_getArticlesCommentsDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
    articleId: Int!
  ): ResponseBaseOfDashboardInfo
  dashboard_getArticlesViewsDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
    articleId: Int!
  ): ResponseBaseOfDashboardInfo
  dashboard_getArticlesSavesDashboardInfo(
    startDate: DateTime!
    endDate: DateTime!
    articleId: Int!
  ): ResponseBaseOfDashboardInfo
  dashboard_getAdminActivities: ListResponseBaseOfEventModel
  discount_getDiscount(entityId: Int!): SingleResponseBaseOfDiscount
  discount_getDiscountes: ListResponseBaseOfDiscount
  follow_getFollowings: ListResponseBaseOfUserFollower
  follow_isMyFollower(otherUserId: Int!): ResponseBaseOfBoolean
  follow_isMyFollowing(otherUserId: Int!): ResponseBaseOfBoolean
  follow_getFollowInfo(otherUserId: Int!): ResponseBaseOfFollowInfoDto
  follow_getMyFollowersFollowers: ListResponseBaseOfUserFollower
  hideStory_getMyHideStory(entityId: Int!): SingleResponseBaseOfHideStory
  hideStory_getMyHideStories: ListResponseBaseOfHideStoryDto
  highLight_getHighLight(entityId: Int!): SingleResponseBaseOfHighLight
  highLight_getHighLights: ListResponseBaseOfHighLight
  likeArticleComment_getLikedArticleComment(
    entityId: Int!
  ): SingleResponseBaseOfLikeArticleComment
  LikeArticleComment_getLikedArticleComments: ListResponseBaseOfLikeArticleComment
  likeComment_getLikedComment(entityId: Int!): SingleResponseBaseOfLikeComment
  likeComment_getLikedComments: ListResponseBaseOfLikeComment
  link_getLink(entityId: Int!): SingleResponseBaseOfLink
  link_getLinks(searchTerm: String): ListResponseBaseOfLink
  message_getMessage(entityId: Int!): SingleResponseBaseOfMessage
  message_getDirectMessages(userId: Int): ListResponseBaseOfMessageDto
  message_getGroupMessages: ListResponseBaseOfMessageDto
  message_getDiscussions: ListResponseBaseOfDiscussionsDto
  message_isGroupLinkExist(groupLink: String): ResponseBaseOfBoolean
  message_generateUniqueKeyForGroup: ResponseBaseOfString
  message_getGroup(conversationId: Int!): SingleResponseBaseOfConversationDto
  message_getGroups(userId: Int): ListResponseBaseOfConversationDto
  message_getConversation(
    conversationId: Int!
  ): SingleResponseBaseOfConversation
  message_getUserMessages(userId: Int): ListResponseBaseOfConversationDto
  message_getGroupMembers(
    conversationId: Int!
  ): ListResponseBaseOfUserMessageGroup
  message_getConversationWithOtherUser(
    otherUserId: Int!
  ): SingleResponseBaseOfConversation
  message_getMyFollowerNotInvitedToGroup(
    conversationId: Int
  ): ListResponseBaseOfFollowUserForGroupDto
  message_getUsersNotInvitedToGroup(
    conversationId: Int
  ): ListResponseBaseOfFollowUserForGroupDto
  notification_getNotification(entityId: Int!): SingleResponseBaseOfNotification
  notification_getNotifications: ListResponseBaseOfNotification
  notification_getMyNotifications: ListResponseBaseOfNotificationDto
  notInterestedArticle_getNotInterestedArticle(
    entityId: Int!
  ): SingleResponseBaseOfNotInterestedArticle
  notInterestedPost_getNotInterestedPost(
    entityId: Int!
  ): SingleResponseBaseOfNotInterestedPost
  notInterestedPost_getNotInterestedPosts: ListResponseBaseOfNotInterestedPost
  payment_getAllPayments: ListResponseBaseOfPayment
  payment_getPublishableKey: ResponseBaseOfString
  payment_hasStripeAccount: ResponseBaseOfBoolean
  payment_getStripeAccountRequirements: ListResponseBaseOfStripeAccountRequirementsError
  payment_getViewPrice: ResponseBaseOfViewPriceDto
  permissions_getPermissions(
    username: String
  ): ListResponseBaseOfUserClaimsViewModel
  place_getPlace(entityId: Int!): SingleResponseBaseOfPlace
  place_getPlaces: ListResponseBaseOfPlace
  post_getPost(entityId: Int!): SingleResponseBaseOfPostDto
  post_getPosts: ListResponseBaseOfPostDto
  post_getAds: ListResponseBaseOfPostDto
  post_getPromotedPosts: ListResponseBaseOfPostDto
  post_getRandomPosts: ListResponseBaseOfPostDto
  post_getExplorePosts(
    lastId: Int
    pageSize: Int!
    searchTerm: String
  ): PostExploreDto
  post_getPostsInAdvanceWay(
    getPostType: GetPostType!
  ): ListResponseBaseOfPostDto
  post_getTopPosts(from: DateTime!): ListResponseBaseOfPostDto
  post_getFollowersPosts: ListResponseBaseOfPostDto
  post_getLikedPosts: ListResponseBaseOfPostLikesDto
  post_getPostViews: ListResponseBaseOfUserViewPost
  post_getSavedPosts: ListResponseBaseOfSavePostDto
  post_getRecommendedPosts: ListResponseBaseOfPostDto
  publicNotification_getPublicNotification(
    entityId: Int!
  ): SingleResponseBaseOfPublicNotification
  publicNotification_getPublicNotificationes: ListResponseBaseOfPublicNotification
  report_getReport(entityId: Int!): SingleResponseBaseOfReport
  report_getReports: ListResponseBaseOfReport
  message_getSecretMessage(entityId: Int!): SingleResponseBaseOfSecretMessage
  message_getDirectSecretMessage: ListResponseBaseOfSecretMessageDto
  message_getSecretConversation(
    conversationId: Int!
  ): SingleResponseBaseOfSecretConversation
  message_getSecretUserMessages(
    publicKey: String
  ): ListResponseBaseOfSecretConversationDto
  message_getSecretConversationWithOtherUser(
    otherUserId: Int!
  ): SingleResponseBaseOfSecretConversation
  securityAnswer_getSecurityAnswers(
    username: String
    password: String
  ): ListResponseBaseOfSecurityAnswer
  securityAnswer_getSecurityAnswersByToken: ListResponseBaseOfSecurityAnswer
  securityQuestion_getSecurityQuestions: ListResponseBaseOfSecurityQuestion
  settings_getSettings: ResponseBaseOfSettingsDto
  storyComment_getStoryComment(entityId: Int!): SingleResponseBaseOfStoryComment
  storyComment_getStoryComments: ListResponseBaseOfStoryComment
  story_getStoryUser: ListResponseBaseOfStoryUserDto
  story_getMyStory(entityId: Int!): SingleResponseBaseOfStory
  story_getUserStoriesCount(activeStory: Boolean!): ResponseBaseOfInt32
  story_getMyStories: ListResponseBaseOfStoryDto
  story_getStories: ListResponseBaseOfStoryDto
  story_getStoriesForAdmin: ListResponseBaseOfStoryDto
  post_getLikedStories: ListResponseBaseOfStoryLike
  storySeen_getStorySeen(entityId: Int!): SingleResponseBaseOfStorySeen
  storySeen_getStorySeens: ListResponseBaseOfStorySeenDto
  strike_getStrike(entityId: Int!): SingleResponseBaseOfStrike
  strike_getStrikes: ListResponseBaseOfStrike
  strike_getUserWithStrikes: ListResponseBaseOfStrikeDto
  subscriptionPlan_getSubscriptionPlans: ListResponseBaseOfSubscriptionPlanDto
  support_getSupport(entityId: Int!): SingleResponseBaseOfSupport
  support_getSupports: ListResponseBaseOfSupport
  suspend_getSuspend(entityId: Int!): SingleResponseBaseOfSuspend
  suspend_getSuspends: ListResponseBaseOfSuspend
  tag_getTag(entityId: Int!): SingleResponseBaseOfTag
  tag_getTags: ExtendedListResponseBaseOfTag
  user_getUser(entityId: Int!): SingleResponseBaseOfUser
  user_getUsers: ListResponseBaseOfUser
  user_getSingleUserInfo(userId: Int!): ResponseBaseOfSingleUserDto
  user_usernameExist(username: String): ResponseBaseOfBoolean
  user_signIn: SingleResponseBaseOfUser
  user_getCurrentUser: ResponseBaseOfCurrentUserDto
  user_getSuspiciousActivities: ListResponseBaseOfUserSusciopiousDto
  user_isTwoFacorEnabled: ResponseBaseOfBoolean
  user_getAdminInfo: ResponseBaseOfAdminInfoDto
  user_getUserById(userId: Int!): ResponseBaseOfUser
  user_getUsersHaveNotBlocked: ListResponseBaseOfUser
  user_getResetPasswordRequests: ListResponseBaseOfResetPasswordRequest
  userSearchAccount_getUserSearchAccount(
    entityId: Int!
  ): SingleResponseBaseOfUserSearchAccount
  userSearchAccount_getUserSearchAccounts: ListResponseBaseOfUserSearchAccount
  userSearchArticle_getUserSearchArticle(
    entityId: Int!
  ): SingleResponseBaseOfUserSearchArticle
  userSearchArticle_getUserSearchArticles: ListResponseBaseOfUserSearchArticle
  userSearchGroup_getUserSearchGroup(
    entityId: Int!
  ): SingleResponseBaseOfUserSearchGroupDto
  userSearchGroup_getUserSearchGroups: ListResponseBaseOfUserSearchGroupDto
  userSearchPlace_getUserSearchPlace(
    entityId: Int!
  ): SingleResponseBaseOfUserSearchPlace
  userSearchPlace_getuserSearchPlaces: ListResponseBaseOfUserSearchPlace
  userSearchPost_getUserSearchPost(
    entityId: Int!
  ): SingleResponseBaseOfUserSearchPost
  userSearchTag_getUserSearchTag(
    entityId: Int!
  ): SingleResponseBaseOfUserSearchTag
  userSearchTag_getUserSearchTags: ListResponseBaseOfUserSearchTag

  """
  Get current user subscription plan that user subscribed to.
  """
  usersSubscription_getUsersSubscriptionsFeatures: ResponseBaseOfUsersSubscriptionsFeaturesDto
  userVisitLink_getUserVisitLink(
    entityId: Int!
  ): SingleResponseBaseOfUserVisitLink
  userVisitLink_getUserVisitLinks: ListResponseBaseOfUserVisitLink
  verificationRequest_getVerificationRequest(
    entityId: Int!
  ): SingleResponseBaseOfVerificationRequest
  verificationRequest_getVerificationRequests: ListResponseBaseOfVerificationRequest
  viewPost_getViewPost(entityId: Int!): SingleResponseBaseOfUserViewPost
  viewPost_getViewPosts: ListResponseBaseOfUserViewPost
  warningBanner_getWarningBanner(
    entityId: Int!
  ): SingleResponseBaseOfWarningBanner
  warningBanner_getWarningBanners: ListResponseBaseOfWarningBanner
}

type Mutation {
  ads_deleteAds(adsId: Int!): ResponseBaseOfAds
  ads_suspendAds(adsId: Int!): ResponseBaseOfAds
  ads_unSuspendAds(adsId: Int!): ResponseBaseOfAds
  ads_rejectAds(adsId: Int!): ResponseBaseOfAds
  ads_unRejectAds(adsId: Int!): ResponseBaseOfAds
  ads_appealAds(input: AppealAdsInput): ResponseBaseOfAppealAds
  ads_appealReject(appealAdsId: Int!, reasonReject: String): ResponseBase
  ads_appealAccept(appealAdsId: Int!): ResponseBase
  articleComment_createArticleComment(
    input: ArticleCommentInput
  ): ResponseBaseOfArticleComment
  articleComment_removeArticleComment(entityId: Int!): ResponseStatus
  comment_undoArticleComment(entityId: Int!): ResponseStatus
  articleComment_removeListArticleComment(ids: [Int!]): ResponseBaseOfBoolean
  articleComment_updateArticleComment(
    input: ArticleCommentInput
  ): ResponseBaseOfArticleComment
  article_createArticle(input: ArticleInput): ResponseBaseOfArticle
  article_promoteArticle(
    input: PromoteArticleInput
  ): ResponseBaseOfArticleAdsDto
  article_removeArticle(entityId: Int!): ResponseStatus
  article_updateArticle(input: ArticleInput): ResponseBaseOfArticle
  article_pinArticle(articleId: Int!, pin: Boolean!): ResponseBaseOfArticle
  article_verifyArticle(
    articleId: Int!
    verify: Boolean!
  ): ResponseBaseOfArticle
  article_likeArticle(
    articleId: Int!
    liked: Boolean! = true
  ): ResponseBaseOfArticleLike
  article_unLikeArticle(articleId: Int!): ResponseBase
  article_addViewToArticle(articleId: Int!): ResponseBaseOfUserViewArticle
  article_saveArticle(articleId: Int!): ResponseBase
  article_unSaveArticle(articleId: Int!): ResponseBase
  article_undoArticleRemove(entityId: Int!): ResponseStatus
  blockUser_blockUser(input: BlockUserInput): ResponseBaseOfBlockUser
  block_unBlockUser(input: BlockUserInput): ResponseBaseOfResponseStatus
  comment_createComment(commentInput: CommentInput): ResponseBaseOfComment
  comment_removeComment(entityId: Int!): ResponseStatus
  comment_undoRemoveComment(entityId: Int!): ResponseStatus
  comment_removeListComment(ids: [Int!]): ResponseBaseOfBoolean
  comment_updateComment(input: CommentInput): ResponseBaseOfComment
  discount_createDiscount(input: DiscountInput): ResponseBaseOfDiscount
  discount_removeDiscount(entityId: Int!): ResponseStatus
  discount_updateDiscount(input: DiscountInput): ResponseBaseOfDiscount
  follow_followUser(followerInput: FollowerInput): ResponseBaseOfUserFollower
  follow_unFollowUser(
    followerInput: FollowerInput
  ): ResponseBaseOfResponseStatus
  follow_confirmFollowRequest(
    followerInput: FollowerInput
  ): ResponseBaseOfUserFollower
  follow_rejectFollowRequest(
    followerInput: FollowerInput
  ): ResponseBaseOfUserFollower
  highLight_createHighLight(input: HighLightInput): ResponseBaseOfHighLight
  highLight_removeHighLight(entityId: Int!): ResponseStatus
  highLight_updateHighLight(input: HighLightInput): ResponseBaseOfHighLight
  likeArticleComment_LikeArticleComment(
    input: LikeArticleCommentInput
  ): ResponseBaseOfLikeArticleComment
  likeArticleComment_unLikeArticleComment(
    input: LikeArticleCommentInput
  ): ResponseStatus
  likeComment_likeComment(input: LikeCommentInput): ResponseBaseOfLikeComment
  likeComment_unLikeComment(input: LikeCommentInput): ResponseStatus
  message_createDirectMessage(input: MessageInput): ResponseBaseOfMessage
  message_removeConversation(conversationId: Int!): ResponseStatus
  message_removeMessage(messageId: Int!): ResponseStatus
  message_updateMessage(text: String, messageId: Int!): ResponseBaseOfMessage
  message_seenMessages(messagesIds: [Int!]): ResponseBaseOfBoolean
  message_deliveredMessages(messagesIds: [Int!]): ResponseBaseOfBoolean
  message_addUserToGroup(conversationId: Int!, userIds: [Int!]): ResponseStatus
  message_removeUserFromGroup(
    userId: Int!
    conversationId: Int!
  ): ResponseStatus
  message_createConversationGroup(
    input: GroupMessageInput
    userIds: [Int!]
  ): ResponseBaseOfConversation
  message_createGroupMessage(messageInput: MessageInput): ResponseBaseOfMessage
  message_updateGroup(input: GroupInput): ResponseStatus
  notification_sendNotificationToAllUsers(
    notificationId: Int!
    input: NotificationInput
  ): ListResponseBaseOfNotification
  notification_deleteNotification(
    notificationId: Int!
  ): ResponseBaseOfNotification
  notification_readNotification(
    notificationId: Int!
  ): ResponseBaseOfNotification
  notification_readNotifications(notificationIds: [Int!]): ResponseBaseOfBoolean
  notification_readNotificationCurrentUser(
    notificationIds: [Int!]
  ): ResponseBaseOfBoolean
  notInterestedArticle_addNotInterestedArticle(
    input: NotInterestedArticleInput
  ): ResponseBaseOfNotInterestedArticle
  notInterestedArticle_removeFromNotInterestedArticle(
    input: NotInterestedArticleInput
  ): ResponseBaseOfNotInterestedArticle
  notInterestedPost_addNotInterestedPost(
    input: NotInterestedPostInput
  ): ResponseBaseOfNotInterestedPost
  notInterestedPost_removeFromNotInterestedPost(
    input: NotInterestedPostInput
  ): ResponseBaseOfNotInterestedPost
  payment_isTransferEnabled: ResponseBaseOfBoolean
  payment_onboardUserInStripeConnect: ResponseBaseOfString
  payment_createEphemeralKey: ResponseBaseOfEphemeralKeyDto
  payment_createStripeSubscription(
    subscriptionPlanId: Int!
    env: EnvironmentType!
  ): ResponseBaseOfString
  payment_cancelSubscription: ResponseBaseOfBoolean
  permission_updatePermission(
    input: PermissionInput
  ): ListResponseBaseOfUserClaimsViewModel
  post_createPost(input: PostInput): ResponseBaseOfPost
  post_createPostAds(input: PostAdsInput): ResponseBaseOfPostAdsDto
  post_promotePost(input: PromotePostInput): ResponseBaseOfPostAdsDto
  post_removePost(entityId: Int!): ResponseStatus
  post_updatePost(input: PostInput): ResponseBaseOfPost
  post_pinPost(postId: Int!, pin: Boolean!): ResponseBaseOfPost
  post_likePost(postId: Int!, liked: Boolean! = true): ResponseBaseOfPostLikes
  post_unLikePost(postId: Int!): ResponseBase
  post_addViewToPosts(postIds: [Int!]): ResponseBaseOfListOfUserViewPost
  post_savePost(postId: Int!, liked: Boolean! = true): ResponseBase
  post_unSavePost(postId: Int!): ResponseBase
  post_undoPostRemove(entityId: Int!): ResponseStatus
  publicNotification_createPublicNotification(
    input: PublicNotificationInput
  ): ResponseBaseOfPublicNotification
  publicNotification_removePublicNotification(entityId: Int!): ResponseStatus
  publicNotification_updatePublicNotification(
    input: PublicNotificationInput
  ): ResponseBaseOfPublicNotification
  publicNotification_sendPublicNotification(notificationId: Int!): ResponseBase
  report_report(input: ReportInput): ResponseBaseOfReport
  message_createSecretDirectMessage(
    input: SecretMessageInput
  ): ResponseBaseOfSecretMessage
  message_createSecretConversation(
    input: SecretConversationInput
  ): ResponseBaseOfSecretConversation
  message_joinToSecretChat(
    publicKey: String
    secretConversationId: Int!
  ): ResponseBaseOfSecretConversation
  message_removeSecretConversation(
    conversationId: Int!
    publicKey: String
  ): ResponseStatus
  message_removeSecretMessage(messageId: Int!): ResponseStatus
  message_seenSecretMessages(messagesIds: [Int!]): ResponseBaseOfBoolean
  securityAnswer_createSecurityAnswer(
    input: [SecurityAnswerInput]
  ): ListResponseBaseOfSecurityAnswer
  securityAnswer_updateSecurityAnswer(
    input: SecurityAnswerInput
  ): ResponseBaseOfSecurityAnswer
  story_createStory(input: StoryInput): ResponseBaseOfStory
  story_removeStory(entityId: Int!): ResponseStatus
  story_removeListStory(ids: [Int!]): ResponseBaseOfBoolean
  story_addStoryToHighLigh(
    storyId: Int!
    highLLightId: Int!
  ): ResponseBaseOfStory
  story_removeStoryFromHighLigh(storyId: Int!): ResponseBaseOfStory
  story_likeStory(
    storyId: Int!
    liked: Boolean! = true
  ): ResponseBaseOfStoryLike
  story_unLikeStory(storyId: Int!): ResponseBase
  story_hideStories(userIds: [Int!]): ListResponseBaseOfHideStory
  story_hideStory(userId: Int!): ResponseBaseOfHideStory
  story_unHideStory(userId: Int!): ResponseBase
  story_unHideStories(userIds: [Int!]): ListResponseBaseOfHideStory
  story_createComment(input: StoryCommentInput): ResponseBaseOfStoryComment
  store_undoStoreRemove(entityId: Int!): ResponseStatus
  storySeen_createStorySeen(input: StorySeenInput): ResponseBaseOfStorySeen
  storySeen_createStorySeens(
    input: [StorySeenInput]
  ): ListResponseBaseOfStorySeen
  strike_createStrike(input: StrikeInput): ResponseBaseOfStrike
  strike_removeStrike(id: Int!): ResponseBase
  suspend_suspend(input: SuspendInput): ResponseBaseOfSuspend
  suspend_unSuspend(userId: Int!): ResponseBaseOfUser
  tag_addViewToTags(tagsText: [String]): ListResponseBaseOfTag
  tag_sendnotif(id: Int!): ResponseBase
  user_signUp(input: SignUpInput): ResponseBaseOfInt32
  user_confirmEmail(code: String, email: String): ResponseBaseOfTokens
  user_resendEmailConfirmation(
    input: ResendEmailConfirmationInput
  ): ResponseBaseOfBoolean
  user_changePassword(
    changePasswordInput: ChangePasswordInput
  ): ResponseBaseOfBoolean
  user_forgetPassword(
    forgetPassword: ForgetPasswordInput
  ): ResponseBaseOfBoolean
  user_ResetPassword(
    resetPasswordInput: ResetPasswordInput
  ): ResponseBaseOfBoolean
  user_resetPasswordWithSecurityAnswer(
    input: ResetPasswordWithSecurityAnswerInput
  ): ResponseBaseOfBoolean
  user_createResetPasswordRequest(
    input: ResetPasswordRequestInput
  ): ResponseBaseOfBoolean
  user_changeResetPasswordRequestStatus(
    input: ChangeResetPasswordRequestStatusInput
  ): ResponseBaseOfBoolean
  user_registerUserSecurityAnswer(
    input: [RegisterWithSecurityAnswerInput]
    username: String
  ): ResponseBaseOfTokens
  user_login(input: LoginInput): ResponseBaseOfTokens
  user_loginWithOTP(input: LoginWithOTPInput): ResponseBaseOfTokens
  user_loginWithSecurityAnswer(
    input: LoginWithSecurityAnswerInput
  ): ResponseBaseOfTokens
  user_refreshToken(token: TokensInput): ResponseBaseOfTokens
  user_logOut: ResponseBaseOfBoolean
  user_updateProfile(input: UserInput): ResponseBaseOfUser
  user_addPhoneNumber(
    phoneNumber: String
    countryCode: String
  ): ResponseBaseOfBoolean
  user_confirmPhoneNumber(verificationCode: String): ResponseBaseOfBoolean
  user_activationNotifications(
    input: ActivationNotificationInput
  ): ResponseBaseOfUser
  user_activationPrivateAccount(isActive: Boolean!): ResponseBaseOfUser
  user_activationTwoFactorAuthentication(isActive: Boolean!): ResponseBaseOfUser
  user_verificationTwoFactor(
    username: String
    code: String
  ): ResponseBaseOfBoolean
  user_switchToProfessional: ResponseBaseOfUser
  user_switchToNormal: ResponseBaseOfUser
  user_createSupport(input: SupportInput): ResponseBaseOfSupport
  user_setAsAdministrator(
    userTypes: UserTypes!
    userId: Int!
  ): ResponseBaseOfUser
  user_banUser(isActive: Boolean!, userId: Int!): ResponseBaseOfUser
  user_updateLastSeen: ResponseBaseOfUser
  user_deleteAccount(userId: Int): ResponseBaseOfUser
  userSearchAccount_createUserSearchAccount(
    input: UserSearchAccountInput
  ): ResponseBaseOfUserSearchAccount
  userSearchAccount_removeUserSearchAccount(accountId: Int!): ResponseStatus
  userSearchAccount_removeAllUserSearchAccount: ResponseBaseOfBoolean
  searchArticle_createSearchArticle(
    input: UserSearchArticleInput
  ): ResponseBaseOfUserSearchArticle
  searchArticle_removeSearchArticle(articleId: Int!): ResponseStatus
  userSearchGroup_createUserSearchGroup(
    input: UserSearchGroupInput
  ): ResponseBaseOfUserSearchGroup
  userSearchGroup_removeUserSearchGroup(conversationId: Int!): ResponseStatus
  userSearchPlace_createUserSearchPlace(
    input: UserSearchPlaceInput
  ): ResponseBaseOfUserSearchPlace
  userSearchPlace_removeUserSearchPlace(place: String): ResponseStatus
  userSearchPost_createUserSearchPost(
    input: UserSearchPostInput
  ): ResponseBaseOfUserSearchPost
  userSearchPost_removeUserSearchPost(postId: Int!): ResponseStatus
  userSearchTag_createUserSearchTag(
    input: UserSearchTagInput
  ): ResponseBaseOfUserSearchTag
  userSearchTag_removeUserSearchTag(tag: String): ResponseStatus
  userVisitLink_createUserVisitLink(
    input: UserVisitLinkInput
  ): ResponseBaseOfUserVisitLink
  userVisitLink_removeUserVisitLink(
    text: String
    link: String
    postId: Int
    articleId: Int
  ): ResponseStatus
  userVisitLink_removeAllUserVisitLink: ResponseBaseOfBoolean
  verificationRequest_CreateVerificationRequest(
    input: VerificationRequestInput
  ): ResponseBaseOfVerificationRequest
  verificationRequest_acceptVerificationRequest(
    requestId: Int!
  ): ResponseBaseOfVerificationRequest
  verificationRequest_rejectVerificationRequest(
    requestId: Int!
    reason: String
  ): ResponseBaseOfVerificationRequest
  verificationRequest_removeVerificationRequest(requestId: Int!): ResponseBase
  warningBanner_createWarningBanner(
    input: WarningBannerInput
  ): ResponseBaseOfWarningBanner
  warningBanner_removeWarningBanner(entityId: Int!): ResponseStatus
}

type Subscription {
  notificationReceived(userId: Int!): SubscriptionDto
  directMessageAdded(userId: Int!): Message
  directMessageSeened(userId: Int!): Message
  notificationAdded(userId: Int!): Notification
}

interface GeoJSONInterface {
  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType!

  """
  The minimum bounding box around the geometry object
  """
  bbox: [Float]

  """
  The coordinate reference system integer identifier
  """
  crs: Int
}

input GeoJSONPointInput {
  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType

  """
  The "coordinates" field is a single position.
  """
  coordinates: Position

  """
  The coordinate reference system integer identifier
  """
  crs: Int
}

input GeoJSONMultiPointInput {
  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType

  """
  The "coordinates" field is an array of positions.
  """
  coordinates: [Position]

  """
  The coordinate reference system integer identifier
  """
  crs: Int
}

input GeoJSONLineStringInput {
  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType

  """
  The "coordinates" field is an array of two or more positions.
  """
  coordinates: [Position]

  """
  The coordinate reference system integer identifier
  """
  crs: Int
}

input GeoJSONMultiLineStringInput {
  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType

  """
  The "coordinates" field is an array of LineString coordinate arrays.
  """
  coordinates: [[Position]]

  """
  The coordinate reference system integer identifier
  """
  crs: Int
}

input GeoJSONPolygonInput {
  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType

  """
  The "coordinates" field MUST be an array of linear ring coordinate arrays. For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface.
  """
  coordinates: [[Position]]

  """
  The coordinate reference system integer identifier
  """
  crs: Int
}

input GeoJSONMultiPolygonInput {
  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType

  """
  The "coordinates" field is an array of Polygon coordinate arrays.
  """
  coordinates: Coordinates

  """
  The coordinate reference system integer identifier
  """
  crs: Int
}

type GeoJSONPointType implements GeoJSONInterface {
  """
  The "coordinates" field is a single position.
  """
  coordinates: Position

  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType!

  """
  The minimum bounding box around the geometry object
  """
  bbox: [Float!]!

  """
  The coordinate reference system integer identifier
  """
  crs: Int!
}

type GeoJSONMultiPointType implements GeoJSONInterface {
  """
  The "coordinates" field is an array of positions.
  """
  coordinates: [Position]

  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType!

  """
  The minimum bounding box around the geometry object
  """
  bbox: [Float!]!

  """
  The coordinate reference system integer identifier
  """
  crs: Int!
}

type GeoJSONLineStringType implements GeoJSONInterface {
  """
  The "coordinates" field is an array of two or more positions.
  """
  coordinates: [Position]

  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType!

  """
  The minimum bounding box around the geometry object
  """
  bbox: [Float!]!

  """
  The coordinate reference system integer identifier
  """
  crs: Int!
}

type GeoJSONMultiLineStringType implements GeoJSONInterface {
  """
  The "coordinates" field is an array of LineString coordinate arrays.
  """
  coordinates: [Position]

  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType!

  """
  The minimum bounding box around the geometry object
  """
  bbox: [Float!]!

  """
  The coordinate reference system integer identifier
  """
  crs: Int!
}

type GeoJSONPolygonType implements GeoJSONInterface {
  """
  The "coordinates" field MUST be an array of linear ring coordinate arrays. For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface.
  """
  coordinates: [[Position]]

  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType!

  """
  The minimum bounding box around the geometry object
  """
  bbox: [Float!]!

  """
  The coordinate reference system integer identifier
  """
  crs: Int!
}

type GeoJSONMultiPolygonType implements GeoJSONInterface {
  """
  The "coordinates" field is an array of Polygon coordinate arrays.
  """
  coordinates: Coordinates

  """
  The geometry type of the GeoJson object
  """
  type: GeoJSONGeometryType!

  """
  The minimum bounding box around the geometry object
  """
  bbox: [Float!]!

  """
  The coordinate reference system integer identifier
  """
  crs: Int!
}

enum GeoJSONGeometryType {
  Point
  MultiPoint
  LineString
  MultiLineString
  Polygon
  MultiPolygon
  GeometryCollection
}

scalar Geometry

"""
A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.
"""
scalar Position

"""
A coordinate is an array of positions.
"""
scalar Coordinates

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

input ResetPasswordRequestInput {
  governmentIssuePhotoId: String!
  otherFiles: [String]
  username: String!
  legalName: String!
  displayName: String!
  dateOfBirth: DateTime!
  gender: Gender!
  contactEmailOrUsername: String!
  proofOfAddress: String!
}

input ResetPasswordWithSecurityAnswerInput {
  username: String!
  answer1: String
  questionId1: Int!
  answer2: String
  questionId2: Int!
  password: String
}

input ResetPasswordInput {
  email: String!
  password: String!
  code: String!
}

input ForgetPasswordInput {
  email: String!
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input ResendEmailConfirmationInput {
  email: String!
}

type ResponseBaseOfTokens {
  result: Tokens
  status: Any
}

input SignUpInput {
  email: String
  password: String!
  displayName: String!
  legalName: String!
  username: String!
  dateOfBirth: DateTime!
  enableTwoFactorAuthentication: Boolean!
  gender: Gender!
  ip: String
}

type ResponseBaseOfInt32 {
  result: Int!
  status: Any
}

type ListResponseBaseOfTag {
  result(
    skip: Int
    take: Int
    where: TagFilterInput
    order: [TagSortInput!]
  ): TagCollectionSegment
  status: Any
}

type ResponseBaseOfUser {
  result: User
  status: Any
}

input SuspendInput {
  userId: Int!
  dayCount: Int!
  id: Int
}

type ResponseBaseOfSuspend {
  result: Suspend
  status: Any
}

input StrikeInput {
  text: String!
  postId: Int
  articleId: Int
  userId: Int!
  id: Int
}

type ResponseBaseOfStrike {
  result: Strike
  status: Any
}

type ListResponseBaseOfStorySeen {
  result(
    skip: Int
    take: Int
    where: StorySeenFilterInput
    order: [StorySeenSortInput!]
  ): StorySeenCollectionSegment
  status: Any
}

input StorySeenInput {
  storyId: Int
  id: Int
}

type ResponseBaseOfStorySeen {
  result: StorySeen
  status: Any
}

input StoryCommentInput {
  text: String!
  storyId: Int!
  id: Int
}

type ResponseBaseOfStoryComment {
  result: StoryComment
  status: Any
}

type ResponseBaseOfHideStory {
  result: HideStory
  status: Any
}

type ListResponseBaseOfHideStory {
  result(
    skip: Int
    take: Int
    where: HideStoryFilterInput
    order: [HideStorySortInput!]
  ): HideStoryCollectionSegment
  status: Any
}

type ResponseBaseOfStoryLike {
  result: StoryLike
  status: Any
}

input StoryInput {
  contentAddress: String
  storyType: StoryType!
  link: String
  text: String
  highLightId: Int
  postId: Int
  articleId: Int
  duration: Int
  id: Int
}

type ResponseBaseOfStory {
  result: Story
  status: Any
}

type ResponseBaseOfSecurityAnswer {
  result: SecurityAnswer
  status: Any
}

input SecurityAnswerInput {
  id: Int
  questionId: Int!
  answer: String!
}

type ListResponseBaseOfSecurityAnswer {
  result(
    skip: Int
    take: Int
    where: SecurityAnswerFilterInput
    order: [SecurityAnswerSortInput!]
  ): SecurityAnswerCollectionSegment
  status: Any
}

input SecretConversationInput {
  senderId: Int!
  receiverId: Int!
  publicKey: String
}

type ResponseBaseOfSecretConversation {
  result: SecretConversation
  status: Any
}

input SecretMessageInput {
  secretConversationId: Int
  senderId: Int
  receiverId: Int
  aesEncryptedMessageType: String
  aesEncryptedContentAddress: String
  aesEncryptedProfile: String
  aesEncryptedPost: String
  aesEncryptedArticle: String
  aesEncryptedStory: String
  parentMessageId: Int
  publicKey: String
}

type ResponseBaseOfSecretMessage {
  result: SecretMessage
  status: Any
}

input ReportInput {
  text: String!
  reason: String
  email: String
  reportType: ReportType!
  postId: Int
  articleId: Int
  commentId: Int
  articleCommentId: Int
  reportedId: Int
  messageId: Int
  id: Int
}

type ResponseBaseOfReport {
  result: Report
  status: Any
}

input PublicNotificationInput {
  text: String
  gender: Gender!
  fromAge: Int!
  toAge: Int!
  isSendAll: Boolean!
  id: Int
}

type ResponseBaseOfPublicNotification {
  result: PublicNotification
  status: Any
}

type ResponseBaseOfListOfUserViewPost {
  result: [UserViewPost]
  status: Any
}

type ResponseBaseOfPostLikes {
  result: PostLikes
  status: Any
}

input PromotePostInput {
  postId: Int!
  discountCode: String
  isWithOutPayment: Boolean!
  visitType: VisitType!
  targetLocation: String!
  targetStartAge: Int!
  targetEndAge: Int!
  targetGenders: TargetGender!
  manualStatus: ManualStatus!
  numberOfPeopleCanSee: Int!
}

input PostAdsInput {
  id: Int
  yourMind: String!
  allowDownload: Boolean!
  location: String!
  posterId: Int
  postItems: [PostItemInput]!
  tags: [String]
  isWithOutPayment: Boolean!
  discountCode: String
  visitType: VisitType!
  targetLocation: String!
  targetStartAge: Int!
  targetEndAge: Int!
  targetGenders: TargetGender!
  manualStatus: ManualStatus!
  numberOfPeopleCanSee: Int!
}

type ResponseBaseOfPostAdsDto {
  result: PostAdsDto
  status: Any
}

input PostInput {
  id: Int
  isByAdmin: Boolean!
  yourMind: String!
  allowDownload: Boolean!
  location: String
  posterId: Int
  isCreatedInGroup: Boolean!
  postItems: [PostItemInput]!
  tags: [String]
  linkInputs: [LinkInput]
}

type ResponseBaseOfPost {
  result: Post
  status: Any
}

input PermissionInput {
  email: String
  userClaims: [UserClaimsViewModelInput]
}

type ListResponseBaseOfUserClaimsViewModel {
  result(
    skip: Int
    take: Int
    where: UserClaimsViewModelFilterInput
    order: [UserClaimsViewModelSortInput!]
  ): UserClaimsViewModelCollectionSegment
  status: Any
}

enum EnvironmentType {
  MOBILE
  WEB
}

type ResponseBaseOfEphemeralKeyDto {
  result: EphemeralKeyDto
  status: Any
}

type ResponseBaseOfString {
  result: String
  status: Any
}

input NotInterestedPostInput {
  postId: Int!
  id: Int
}

type ResponseBaseOfNotInterestedPost {
  result: NotInterestedPost
  status: Any
}

input NotInterestedArticleInput {
  articleId: Int!
  id: Int
}

type ResponseBaseOfNotInterestedArticle {
  result: NotInterestedArticle
  status: Any
}

type ResponseBaseOfNotification {
  result: Notification
  status: Any
}

input NotificationInput {
  text: String
  notificationType: NotificationType!
  gender: Gender
  startDate: DateTime
  endDate: DateTime
  id: Int
}

type ListResponseBaseOfNotification {
  result(
    skip: Int
    take: Int
    where: NotificationFilterInput
    order: [NotificationSortInput!]
  ): NotificationCollectionSegment
  status: Any
}

input GroupInput {
  conversationId: Int!
  groupName: String!
  groupDescription: String
  groupImgageUrl: String
  groupLink: String
  isPrivate: Boolean!
}

input GroupMessageInput {
  groupName: String!
  groupDescription: String
  groupLink: String
  groupImgageUrl: String
  isShare: Boolean!
  isPrivate: Boolean!
}

type ResponseBaseOfConversation {
  result: Conversation
  status: Any
}

input MessageInput {
  messageType: MessageType!
  contentAddress: String
  profileId: Int
  postId: Int
  articleId: Int
  storyId: Int
  parentMessageId: Int
  conversationId: Int
  isShare: Boolean!
  receiverId: Int
  text: String
}

type ResponseBaseOfMessage {
  result: Message
  status: Any
}

input LikeCommentInput {
  commentId: Int!
  id: Int
}

type ResponseBaseOfLikeComment {
  result: LikeComment
  status: Any
}

input LikeArticleCommentInput {
  articleCommentId: Int!
  id: Int
}

type ResponseBaseOfLikeArticleComment {
  result: LikeArticleComment
  status: Any
}

input HighLightInput {
  title: String!
  cover: String!
  storyIds: [Int!]
  id: Int
}

type ResponseBaseOfHighLight {
  result: HighLight
  status: Any
}

input FollowerInput {
  followerId: Int
  followedId: Int
}

type ResponseBaseOfUserFollower {
  result: UserFollower
  status: Any
}

input DiscountInput {
  discountCode: String
  percent: Int!
  amount: Decimal!
  expireDate: DateTime!
  id: Int
}

type ResponseBaseOfDiscount {
  result: Discount
  status: Any
}

input CommentInput {
  postId: Int!
  parentId: Int
  id: Int
  mentionId: Int
  text: String
  commentType: CommentType!
  contentAddress: String
}

type ResponseBaseOfComment {
  result: Comment
  status: Any
}

type ResponseBaseOfResponseStatus {
  result: ResponseStatus
  status: Any
}

input BlockUserInput {
  blockedId: Int
}

type ResponseBaseOfBlockUser {
  result: BlockUser
  status: Any
}

type ResponseBaseOfUserViewArticle {
  result: UserViewArticle
  status: Any
}

type ResponseBaseOfArticleLike {
  result: ArticleLike
  status: Any
}

input PromoteArticleInput {
  articleId: Int!
  discountCode: String
  isWithOutPayment: Boolean!
  visitType: VisitType!
  targetLocation: String!
  targetStartAge: Int!
  targetEndAge: Int!
  targetGenders: TargetGender!
  manualStatus: ManualStatus!
  numberOfPeopleCanSee: Int!
}

type ResponseBaseOfArticleAdsDto {
  result: ArticleAdsDto
  status: Any
}

input ArticleInput {
  isByAdmin: Boolean!
  author: String!
  title: String!
  subTitle: String!
  isCreatedInGroup: Boolean!
  articleItems: [ArticleItemInput]
  linkInputs: [LinkInput]
  id: Int
}

type ResponseBaseOfArticle {
  result: Article
  status: Any
}

type ResponseBaseOfBoolean {
  result: Boolean!
  status: Any
}

type ResponseStatus {
  code: Int!
  value: String
}

input ArticleCommentInput {
  mentionId: Int
  text: String
  commentType: CommentType!
  contentAddress: String
  articleId: Int!
  parentId: Int
  id: Int
}

type ResponseBaseOfArticleComment {
  result: ArticleComment
  status: Any
}

type ResponseBase {
  status: Any
}

input AppealAdsInput {
  adsId: Int!
  description: String
}

type ResponseBaseOfAppealAds {
  result: AppealAds
  status: Any
}

type ResponseBaseOfAds {
  result: Ads
  status: Any
}

input ChangeResetPasswordRequestStatusInput {
  requestId: Int!
  status: ResetPasswordRequestStatus!
  password: String!
}

input RegisterWithSecurityAnswerInput {
  answer: String
  questionId: Int!
}

input LoginInput {
  username: String!
  password: String!
}

input LoginWithOTPInput {
  username: String!
  code: String!
}

input LoginWithSecurityAnswerInput {
  username: String!
  answer1: String!
  questionId1: Int!
  answer2: String!
  questionId2: Int!
}

input TokensInput {
  access_Token: String
  refresh_Token: String
  validTo: DateTime!
}

input UserInput {
  bio: String
  displayName: String!
  username: String!
  dateOfBirth: DateTime!
  imageAddress: String
  cover: String
  gender: Gender!
  linkBio: String
  location: String
  enableTwoFactorAuthentication: Boolean!
  phoneNumber: String
  countryCode: String
  id: Int
}

input ActivationNotificationInput {
  directNotification: Boolean!
  followeBacknotification: Boolean!
  likeNotification: Boolean!
  commentNotification: Boolean!
}

type ResponseBaseOfSupport {
  result: Support
  status: Any
}

input SupportInput {
  email: String!
  text: String!
  category: String
  id: Int
}

enum UserTypes {
  SUPER_ADMIN
  ADMIN
  USER
}

type ResponseBaseOfUserSearchAccount {
  result: UserSearchAccount
  status: Any
}

input UserSearchAccountInput {
  searchedId: Int!
}

type ResponseBaseOfUserSearchArticle {
  result: UserSearchArticle
  status: Any
}

input UserSearchArticleInput {
  articleId: Int!
}

type ResponseBaseOfUserSearchGroup {
  result: UserSearchGroup
  status: Any
}

input UserSearchGroupInput {
  conversationId: Int!
}

type ResponseBaseOfUserSearchPlace {
  result: UserSearchPlace
  status: Any
}

input UserSearchPlaceInput {
  place: String
  id: Int
}

type ResponseBaseOfUserSearchPost {
  result: UserSearchPost
  status: Any
}

input UserSearchPostInput {
  postId: Int!
}

type ResponseBaseOfUserSearchTag {
  result: UserSearchTag
  status: Any
}

input UserSearchTagInput {
  tag: String!
}

type ResponseBaseOfUserVisitLink {
  result: UserVisitLink
  status: Any
}

input UserVisitLinkInput {
  postId: Int
  articleId: Int
  linkType: LinkType!
  text: String!
  link: String
}

type ResponseBaseOfVerificationRequest {
  result: VerificationRequest
  status: Any
}

input VerificationRequestInput {
  verificationRequestAcceptStatus: VerificationRequestAcceptStatus!
  proofOfAddress: String!
  governmentIssuePhotoId: String!
  otheFiles: [String]!
  id: Int
}

type ResponseBaseOfWarningBanner {
  result: WarningBanner
  status: Any
}

input WarningBannerInput {
  userId: Int!
  description: String!
  postId: Int
  articleId: Int
  id: Int
}

type SingleResponseBaseOfAdsDto {
  result: AdsDto
  status: Any
}

type ListResponseBaseOfAdsDto {
  result(
    skip: Int
    take: Int
    where: AdsDtoFilterInput
    order: [AdsDtoSortInput!]
  ): AdsDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfArticleCommentDto {
  result: ArticleCommentDto
  status: Any
}

type ListResponseBaseOfArticleCommentDto {
  result(
    skip: Int
    take: Int
    where: ArticleCommentDtoFilterInput
    order: [ArticleCommentDtoSortInput!]
  ): ArticleCommentDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfArticleLike {
  result: ArticleLike
  status: Any
}

type ListResponseBaseOfArticleLike {
  result(
    skip: Int
    take: Int
    where: ArticleLikeFilterInput
    order: [ArticleLikeSortInput!]
  ): ArticleLikeCollectionSegment
  status: Any
}

type SingleResponseBaseOfArticleDto {
  result: ArticleDto
  status: Any
}

type ListResponseBaseOfArticleDto {
  result(
    skip: Int
    take: Int
    where: ArticleDtoFilterInput
    order: [ArticleDtoSortInput!]
  ): ArticleDtoCollectionSegment
  status: Any
}

enum GetArticleType {
  EXPLORE
  FOR_YOU
  MOST_ENGAGED
  NEWEST
  NEWS
  MY_ARTICLES
}

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

type ListResponseBaseOfArticleLikeDto {
  result(
    skip: Int
    take: Int
    where: ArticleLikeDtoFilterInput
    order: [ArticleLikeDtoSortInput!]
  ): ArticleLikeDtoCollectionSegment
  status: Any
}

type ListResponseBaseOfUserViewArticle {
  result(
    skip: Int
    take: Int
    where: UserViewArticleFilterInput
    order: [UserViewArticleSortInput!]
  ): UserViewArticleCollectionSegment
  status: Any
}

type ListResponseBaseOfSaveArticleDto {
  result(
    skip: Int
    take: Int
    where: SaveArticleDtoFilterInput
    order: [SaveArticleDtoSortInput!]
  ): SaveArticleDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfBlockUser {
  result: BlockUser
  status: Any
}

type ListResponseBaseOfBlockUser {
  result(
    skip: Int
    take: Int
    where: BlockUserFilterInput
    order: [BlockUserSortInput!]
  ): BlockUserCollectionSegment
  status: Any
}

type SingleResponseBaseOfCommentDto {
  result: CommentDto
  status: Any
}

type ListResponseBaseOfCommentDto {
  result(
    skip: Int
    take: Int
    where: CommentDtoFilterInput
    order: [CommentDtoSortInput!]
  ): CommentDtoCollectionSegment
  status: Any
}

type ResponseBaseOfGetDashboardInfoDto {
  result: GetDashboardInfoDto
  status: Any
}

type ResponseBaseOfDashboardInfo {
  result: DashboardInfo
  status: Any
}

type ListResponseBaseOfEventModel {
  result(
    skip: Int
    take: Int
    where: EventModelFilterInput
    order: [EventModelSortInput!]
  ): EventModelCollectionSegment
  status: Any
}

type SingleResponseBaseOfDiscount {
  result: Discount
  status: Any
}

type ListResponseBaseOfDiscount {
  result(
    skip: Int
    take: Int
    where: DiscountFilterInput
    order: [DiscountSortInput!]
  ): DiscountCollectionSegment
  status: Any
}

type ListResponseBaseOfUserFollower {
  result(
    skip: Int
    take: Int
    where: UserFollowerFilterInput
    order: [UserFollowerSortInput!]
  ): UserFollowerCollectionSegment
  status: Any
}

type ResponseBaseOfFollowInfoDto {
  result: FollowInfoDto
  status: Any
}

type SingleResponseBaseOfHideStory {
  result: HideStory
  status: Any
}

type ListResponseBaseOfHideStoryDto {
  result(
    skip: Int
    take: Int
    where: HideStoryDtoFilterInput
    order: [HideStoryDtoSortInput!]
  ): HideStoryDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfHighLight {
  result: HighLight
  status: Any
}

type ListResponseBaseOfHighLight {
  result(
    skip: Int
    take: Int
    where: HighLightFilterInput
    order: [HighLightSortInput!]
  ): HighLightCollectionSegment
  status: Any
}

type SingleResponseBaseOfLikeArticleComment {
  result: LikeArticleComment
  status: Any
}

type ListResponseBaseOfLikeArticleComment {
  result(
    skip: Int
    take: Int
    where: LikeArticleCommentFilterInput
    order: [LikeArticleCommentSortInput!]
  ): LikeArticleCommentCollectionSegment
  status: Any
}

type SingleResponseBaseOfLikeComment {
  result: LikeComment
  status: Any
}

type ListResponseBaseOfLikeComment {
  result(
    skip: Int
    take: Int
    where: LikeCommentFilterInput
    order: [LikeCommentSortInput!]
  ): LikeCommentCollectionSegment
  status: Any
}

type SingleResponseBaseOfLink {
  result: Link
  status: Any
}

type ListResponseBaseOfLink {
  result(
    skip: Int
    take: Int
    where: LinkFilterInput
    order: [LinkSortInput!]
  ): LinkCollectionSegment
  status: Any
}

type SingleResponseBaseOfMessage {
  result: Message
  status: Any
}

type ListResponseBaseOfMessageDto {
  result(
    skip: Int
    take: Int
    where: MessageDtoFilterInput
    order: [MessageDtoSortInput!]
  ): MessageDtoCollectionSegment
  status: Any
}

type ListResponseBaseOfDiscussionsDto {
  result(
    skip: Int
    take: Int
    where: DiscussionsDtoFilterInput
    order: [DiscussionsDtoSortInput!]
  ): DiscussionsDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfConversationDto {
  result: ConversationDto
  status: Any
}

type ListResponseBaseOfConversationDto {
  result(
    skip: Int
    take: Int
    where: ConversationDtoFilterInput
    order: [ConversationDtoSortInput!]
  ): ConversationDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfConversation {
  result: Conversation
  status: Any
}

type ListResponseBaseOfUserMessageGroup {
  result(
    skip: Int
    take: Int
    where: UserMessageGroupFilterInput
    order: [UserMessageGroupSortInput!]
  ): UserMessageGroupCollectionSegment
  status: Any
}

type ListResponseBaseOfFollowUserForGroupDto {
  result(
    skip: Int
    take: Int
    where: FollowUserForGroupDtoFilterInput
    order: [FollowUserForGroupDtoSortInput!]
  ): FollowUserForGroupDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfNotification {
  result: Notification
  status: Any
}

type ListResponseBaseOfNotificationDto {
  result(
    skip: Int
    take: Int
    where: NotificationDtoFilterInput
    order: [NotificationDtoSortInput!]
  ): NotificationDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfNotInterestedArticle {
  result: NotInterestedArticle
  status: Any
}

type SingleResponseBaseOfNotInterestedPost {
  result: NotInterestedPost
  status: Any
}

type ListResponseBaseOfNotInterestedPost {
  result(
    skip: Int
    take: Int
    where: NotInterestedPostFilterInput
    order: [NotInterestedPostSortInput!]
  ): NotInterestedPostCollectionSegment
  status: Any
}

type ListResponseBaseOfPayment {
  result(
    skip: Int
    take: Int
    where: PaymentFilterInput
    order: [PaymentSortInput!]
  ): PaymentCollectionSegment
  status: Any
}

type ListResponseBaseOfStripeAccountRequirementsError {
  result(
    skip: Int
    take: Int
    where: StripeAccountRequirementsErrorFilterInput
    order: [StripeAccountRequirementsErrorSortInput!]
  ): StripeAccountRequirementsErrorCollectionSegment
  status: Any
}

type ResponseBaseOfViewPriceDto {
  result: ViewPriceDto
  status: Any
}

type SingleResponseBaseOfPlace {
  result: Place
  status: Any
}

type ListResponseBaseOfPlace {
  result(
    skip: Int
    take: Int
    where: PlaceFilterInput
    order: [PlaceSortInput!]
  ): PlaceCollectionSegment
  status: Any
}

type SingleResponseBaseOfPostDto {
  result: PostDto
  status: Any
}

type ListResponseBaseOfPostDto {
  result(
    skip: Int
    take: Int
    where: PostDtoFilterInput
    order: [PostDtoSortInput!]
  ): PostDtoCollectionSegment
  status: Any
}

type PostExploreDto {
  result: [PostDto]
  totalCount: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  status: Any
}

enum GetPostType {
  EXPLORE
  FOR_YOU
  MOST_ENGAGED
  NEWEST
  NEWS
  MY_POSTS
}

type ListResponseBaseOfPostLikesDto {
  result(
    skip: Int
    take: Int
    where: PostLikesDtoFilterInput
    order: [PostLikesDtoSortInput!]
  ): PostLikesDtoCollectionSegment
  status: Any
}

type ListResponseBaseOfUserViewPost {
  result(
    skip: Int
    take: Int
    where: UserViewPostFilterInput
    order: [UserViewPostSortInput!]
  ): UserViewPostCollectionSegment
  status: Any
}

type ListResponseBaseOfSavePostDto {
  result(
    skip: Int
    take: Int
    where: SavePostDtoFilterInput
    order: [SavePostDtoSortInput!]
  ): SavePostDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfPublicNotification {
  result: PublicNotification
  status: Any
}

type ListResponseBaseOfPublicNotification {
  result(
    skip: Int
    take: Int
    where: PublicNotificationFilterInput
    order: [PublicNotificationSortInput!]
  ): PublicNotificationCollectionSegment
  status: Any
}

type SingleResponseBaseOfReport {
  result: Report
  status: Any
}

type ListResponseBaseOfReport {
  result(
    skip: Int
    take: Int
    where: ReportFilterInput
    order: [ReportSortInput!]
  ): ReportCollectionSegment
  status: Any
}

type SingleResponseBaseOfSecretMessage {
  result: SecretMessage
  status: Any
}

type ListResponseBaseOfSecretMessageDto {
  result(
    skip: Int
    take: Int
    where: SecretMessageDtoFilterInput
    order: [SecretMessageDtoSortInput!]
  ): SecretMessageDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfSecretConversation {
  result: SecretConversation
  status: Any
}

type ListResponseBaseOfSecretConversationDto {
  result(
    skip: Int
    take: Int
    where: SecretConversationDtoFilterInput
    order: [SecretConversationDtoSortInput!]
  ): SecretConversationDtoCollectionSegment
  status: Any
}

type ListResponseBaseOfSecurityQuestion {
  result(
    skip: Int
    take: Int
    where: SecurityQuestionFilterInput
    order: [SecurityQuestionSortInput!]
  ): SecurityQuestionCollectionSegment
  status: Any
}

type ResponseBaseOfSettingsDto {
  result: SettingsDto
  status: Any
}

type SingleResponseBaseOfStoryComment {
  result: StoryComment
  status: Any
}

type ListResponseBaseOfStoryComment {
  result(
    skip: Int
    take: Int
    where: StoryCommentFilterInput
    order: [StoryCommentSortInput!]
  ): StoryCommentCollectionSegment
  status: Any
}

type ListResponseBaseOfStoryUserDto {
  result(
    skip: Int
    take: Int
    where: StoryUserDtoFilterInput
    order: [StoryUserDtoSortInput!]
  ): StoryUserDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfStory {
  result: Story
  status: Any
}

type ListResponseBaseOfStoryDto {
  result(
    skip: Int
    take: Int
    where: StoryDtoFilterInput
    order: [StoryDtoSortInput!]
  ): StoryDtoCollectionSegment
  status: Any
}

type ListResponseBaseOfStoryLike {
  result(
    skip: Int
    take: Int
    where: StoryLikeFilterInput
    order: [StoryLikeSortInput!]
  ): StoryLikeCollectionSegment
  status: Any
}

type SingleResponseBaseOfStorySeen {
  result: StorySeen
  status: Any
}

type ListResponseBaseOfStorySeenDto {
  result(
    skip: Int
    take: Int
    where: StorySeenDtoFilterInput
    order: [StorySeenDtoSortInput!]
  ): StorySeenDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfStrike {
  result: Strike
  status: Any
}

type ListResponseBaseOfStrike {
  result(
    skip: Int
    take: Int
    where: StrikeFilterInput
    order: [StrikeSortInput!]
  ): StrikeCollectionSegment
  status: Any
}

type ListResponseBaseOfStrikeDto {
  result(
    skip: Int
    take: Int
    where: StrikeDtoFilterInput
    order: [StrikeDtoSortInput!]
  ): StrikeDtoCollectionSegment
  status: Any
}

type ListResponseBaseOfSubscriptionPlanDto {
  result(
    skip: Int
    take: Int
    where: SubscriptionPlanDtoFilterInput
    order: [SubscriptionPlanDtoSortInput!]
  ): SubscriptionPlanDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfSupport {
  result: Support
  status: Any
}

type ListResponseBaseOfSupport {
  result(
    skip: Int
    take: Int
    where: SupportFilterInput
    order: [SupportSortInput!]
  ): SupportCollectionSegment
  status: Any
}

type SingleResponseBaseOfSuspend {
  result: Suspend
  status: Any
}

type ListResponseBaseOfSuspend {
  result(
    skip: Int
    take: Int
    where: SuspendFilterInput
    order: [SuspendSortInput!]
  ): SuspendCollectionSegment
  status: Any
}

type SingleResponseBaseOfTag {
  result: Tag
  status: Any
}

type ExtendedListResponseBaseOfTag {
  result2(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: TagFilterInput
    order: [TagSortInput!]
  ): TagConnection
  result(
    skip: Int
    take: Int
    where: TagFilterInput
    order: [TagSortInput!]
  ): TagCollectionSegment
  status: Any
}

type SingleResponseBaseOfUser {
  result: User
  status: Any
}

type ListResponseBaseOfUser {
  result(
    skip: Int
    take: Int
    where: UserFilterInput
    order: [UserSortInput!]
  ): UserCollectionSegment
  status: Any
}

type ResponseBaseOfSingleUserDto {
  result: SingleUserDto
  status: Any
}

type ResponseBaseOfCurrentUserDto {
  result: CurrentUserDto
  status: Any
}

type ListResponseBaseOfUserSusciopiousDto {
  result(
    skip: Int
    take: Int
    where: UserSusciopiousDtoFilterInput
    order: [UserSusciopiousDtoSortInput!]
  ): UserSusciopiousDtoCollectionSegment
  status: Any
}

type ResponseBaseOfAdminInfoDto {
  result: AdminInfoDto
  status: Any
}

type ListResponseBaseOfResetPasswordRequest {
  result(
    skip: Int
    take: Int
    where: ResetPasswordRequestFilterInput
    order: [ResetPasswordRequestSortInput!]
  ): ResetPasswordRequestCollectionSegment
  status: Any
}

type SingleResponseBaseOfUserSearchAccount {
  result: UserSearchAccount
  status: Any
}

type ListResponseBaseOfUserSearchAccount {
  result(
    skip: Int
    take: Int
    where: UserSearchAccountFilterInput
    order: [UserSearchAccountSortInput!]
  ): UserSearchAccountCollectionSegment
  status: Any
}

type SingleResponseBaseOfUserSearchArticle {
  result: UserSearchArticle
  status: Any
}

type ListResponseBaseOfUserSearchArticle {
  result(
    skip: Int
    take: Int
    where: UserSearchArticleFilterInput
    order: [UserSearchArticleSortInput!]
  ): UserSearchArticleCollectionSegment
  status: Any
}

type SingleResponseBaseOfUserSearchGroupDto {
  result: UserSearchGroupDto
  status: Any
}

type ListResponseBaseOfUserSearchGroupDto {
  result(
    skip: Int
    take: Int
    where: UserSearchGroupDtoFilterInput
    order: [UserSearchGroupDtoSortInput!]
  ): UserSearchGroupDtoCollectionSegment
  status: Any
}

type SingleResponseBaseOfUserSearchPlace {
  result: UserSearchPlace
  status: Any
}

type ListResponseBaseOfUserSearchPlace {
  result(
    skip: Int
    take: Int
    where: UserSearchPlaceFilterInput
    order: [UserSearchPlaceSortInput!]
  ): UserSearchPlaceCollectionSegment
  status: Any
}

type SingleResponseBaseOfUserSearchPost {
  result: UserSearchPost
  status: Any
}

type SingleResponseBaseOfUserSearchTag {
  result: UserSearchTag
  status: Any
}

type ListResponseBaseOfUserSearchTag {
  result(
    skip: Int
    take: Int
    where: UserSearchTagFilterInput
    order: [UserSearchTagSortInput!]
  ): UserSearchTagCollectionSegment
  status: Any
}

type ResponseBaseOfUsersSubscriptionsFeaturesDto {
  result: UsersSubscriptionsFeaturesDto
  status: Any
}

type SingleResponseBaseOfUserVisitLink {
  result: UserVisitLink
  status: Any
}

type ListResponseBaseOfUserVisitLink {
  result(
    skip: Int
    take: Int
    where: UserVisitLinkFilterInput
    order: [UserVisitLinkSortInput!]
  ): UserVisitLinkCollectionSegment
  status: Any
}

type SingleResponseBaseOfVerificationRequest {
  result: VerificationRequest
  status: Any
}

type ListResponseBaseOfVerificationRequest {
  result(
    skip: Int
    take: Int
    where: VerificationRequestFilterInput
    order: [VerificationRequestSortInput!]
  ): VerificationRequestCollectionSegment
  status: Any
}

type SingleResponseBaseOfUserViewPost {
  result: UserViewPost
  status: Any
}

type SingleResponseBaseOfWarningBanner {
  result: WarningBanner
  status: Any
}

type ListResponseBaseOfWarningBanner {
  result(
    skip: Int
    take: Int
    where: WarningBannerFilterInput
    order: [WarningBannerSortInput!]
  ): WarningBannerCollectionSegment
  status: Any
}

type SubscriptionDto {
  graphqlSubscriptionType: GraphqlSubscriptionType!
  message: Message
  notification: Notification
}

type Message {
  messageType: MessageType!
  contentAddress: String
  groupId: Int
  isEdited: Boolean!
  isSeen: Boolean!
  isDelivered: Boolean!
  seenDate: DateTime
  isShare: Boolean!
  receiverId: Int
  receiver: User
  profileId: Int
  profile: User
  post: Post
  postId: Int
  article: Article
  articleId: Int
  story: Story
  storyId: Int
  parentMessage: Message
  parentMessageId: Int
  childrenMessages: [Message]
  notifications: [Notification]
  reports: [Report]
  createdAt: DateTime!
  conversationId: Int!
  conversation: Conversation
  senderId: Int!
  sender: User
  text: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type Notification {
  text: String
  isReaded: Boolean!
  notificationType: NotificationType!
  userFollower: UserFollower
  userFollowerId: Int
  postLike: PostLikes
  postLikeId: Int
  post: Post
  postId: Int
  article: Article
  articled: Int
  comment: Comment
  commentId: Int
  likeComment: LikeComment
  likeCommentId: Int
  articleComment: ArticleComment
  articleCommentId: Int
  likeArticleComment: LikeArticleComment
  likeArticleCommentId: Int
  articleLike: ArticleLike
  articleLikeId: Int
  storyLike: StoryLike
  storyLikeId: Int
  ads: Ads
  adsId: Int
  storyComment: StoryComment
  storyCommentId: Int
  message: Message
  messageId: Int
  sender: User
  senderId: Int
  reciever: User
  recieverId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

scalar Any

input TagFilterInput {
  and: [TagFilterInput!]
  or: [TagFilterInput!]
  text: StringOperationFilterInput
  hits: IntOperationFilterInput
  userViewTags: ListFilterInputTypeOfUserViewTagFilterInput
  usesCount: IntOperationFilterInput
  likesCount: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input TagSortInput {
  text: SortEnumType
  hits: SortEnumType
  usesCount: SortEnumType
  likesCount: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type TagCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Tag]
  totalCount: Int!
}

input StorySeenFilterInput {
  and: [StorySeenFilterInput!]
  or: [StorySeenFilterInput!]
  story: StoryFilterInput
  storyId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input StorySeenSortInput {
  story: StorySortInput
  storyId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type StorySeenCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [StorySeen]
  totalCount: Int!
}

input HideStoryFilterInput {
  and: [HideStoryFilterInput!]
  or: [HideStoryFilterInput!]
  hider: UserFilterInput
  hiderId: IntOperationFilterInput
  hided: UserFilterInput
  hidedId: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input HideStorySortInput {
  hider: UserSortInput
  hiderId: SortEnumType
  hided: UserSortInput
  hidedId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type HideStoryCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [HideStory]
  totalCount: Int!
}

input SecurityAnswerFilterInput {
  and: [SecurityAnswerFilterInput!]
  or: [SecurityAnswerFilterInput!]
  user: UserFilterInput
  userId: IntOperationFilterInput
  securityQuestion: SecurityQuestionFilterInput
  securityQuestionId: IntOperationFilterInput
  answer: StringOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SecurityAnswerSortInput {
  user: UserSortInput
  userId: SortEnumType
  securityQuestion: SecurityQuestionSortInput
  securityQuestionId: SortEnumType
  answer: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type SecurityAnswerCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [SecurityAnswer]
  totalCount: Int!
}

input UserClaimsViewModelFilterInput {
  and: [UserClaimsViewModelFilterInput!]
  or: [UserClaimsViewModelFilterInput!]
  type: StringOperationFilterInput
  value: StringOperationFilterInput
  selected: BooleanOperationFilterInput
}

input UserClaimsViewModelSortInput {
  type: SortEnumType
  value: SortEnumType
  selected: SortEnumType
}

"""
A segment of a collection.
"""
type UserClaimsViewModelCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserClaimsViewModel]
  totalCount: Int!
}

input NotificationFilterInput {
  and: [NotificationFilterInput!]
  or: [NotificationFilterInput!]
  text: StringOperationFilterInput
  isReaded: BooleanOperationFilterInput
  notificationType: NotificationTypeOperationFilterInput
  userFollower: UserFollowerFilterInput
  userFollowerId: IntOperationFilterInput
  postLike: PostLikesFilterInput
  postLikeId: IntOperationFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articled: IntOperationFilterInput
  comment: CommentFilterInput
  commentId: IntOperationFilterInput
  likeComment: LikeCommentFilterInput
  likeCommentId: IntOperationFilterInput
  articleComment: ArticleCommentFilterInput
  articleCommentId: IntOperationFilterInput
  likeArticleComment: LikeArticleCommentFilterInput
  likeArticleCommentId: IntOperationFilterInput
  articleLike: ArticleLikeFilterInput
  articleLikeId: IntOperationFilterInput
  storyLike: StoryLikeFilterInput
  storyLikeId: IntOperationFilterInput
  ads: AdsFilterInput
  adsId: IntOperationFilterInput
  storyComment: StoryCommentFilterInput
  storyCommentId: IntOperationFilterInput
  message: MessageFilterInput
  messageId: IntOperationFilterInput
  sender: UserFilterInput
  senderId: IntOperationFilterInput
  reciever: UserFilterInput
  recieverId: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input NotificationSortInput {
  text: SortEnumType
  isReaded: SortEnumType
  notificationType: SortEnumType
  userFollower: UserFollowerSortInput
  userFollowerId: SortEnumType
  postLike: PostLikesSortInput
  postLikeId: SortEnumType
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articled: SortEnumType
  comment: CommentSortInput
  commentId: SortEnumType
  likeComment: LikeCommentSortInput
  likeCommentId: SortEnumType
  articleComment: ArticleCommentSortInput
  articleCommentId: SortEnumType
  likeArticleComment: LikeArticleCommentSortInput
  likeArticleCommentId: SortEnumType
  articleLike: ArticleLikeSortInput
  articleLikeId: SortEnumType
  storyLike: StoryLikeSortInput
  storyLikeId: SortEnumType
  ads: AdsSortInput
  adsId: SortEnumType
  storyComment: StoryCommentSortInput
  storyCommentId: SortEnumType
  message: MessageSortInput
  messageId: SortEnumType
  sender: UserSortInput
  senderId: SortEnumType
  reciever: UserSortInput
  recieverId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type NotificationCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Notification]
  totalCount: Int!
}

input AdsDtoFilterInput {
  and: [AdsDtoFilterInput!]
  or: [AdsDtoFilterInput!]
  ads: AdsFilterInput
  adsDtoStatus: AdsDtoStatusOperationFilterInput
  isViewed: BooleanOperationFilterInput
  isSaved: BooleanOperationFilterInput
  isNotInterested: BooleanOperationFilterInput
  isLiked: BooleanOperationFilterInput
  isYours: BooleanOperationFilterInput
  commentCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  viewCount: IntOperationFilterInput
  likeCount: IntOperationFilterInput
  postItemsString: StringOperationFilterInput
  isAppeal: BooleanOperationFilterInput
  appealAds: ListFilterInputTypeOfAppealAdsFilterInput
}

input AdsDtoSortInput {
  ads: AdsSortInput
  adsDtoStatus: SortEnumType
  isViewed: SortEnumType
  isSaved: SortEnumType
  isNotInterested: SortEnumType
  isLiked: SortEnumType
  isYours: SortEnumType
  commentCount: SortEnumType
  shareCount: SortEnumType
  viewCount: SortEnumType
  likeCount: SortEnumType
  postItemsString: SortEnumType
  isAppeal: SortEnumType
}

"""
A segment of a collection.
"""
type AdsDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [AdsDto]
  totalCount: Int!
}

input ArticleCommentDtoFilterInput {
  and: [ArticleCommentDtoFilterInput!]
  or: [ArticleCommentDtoFilterInput!]
  articleComment: ArticleCommentFilterInput
  isLiked: BooleanOperationFilterInput
  likeCount: IntOperationFilterInput
  hasChild: BooleanOperationFilterInput
  childrenCount: IntOperationFilterInput
}

input ArticleCommentDtoSortInput {
  articleComment: ArticleCommentSortInput
  isLiked: SortEnumType
  likeCount: SortEnumType
  hasChild: SortEnumType
  childrenCount: SortEnumType
}

"""
A segment of a collection.
"""
type ArticleCommentDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [ArticleCommentDto]
  totalCount: Int!
}

input ArticleLikeFilterInput {
  and: [ArticleLikeFilterInput!]
  or: [ArticleLikeFilterInput!]
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  liked: BooleanOperationFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ArticleLikeSortInput {
  article: ArticleSortInput
  articleId: SortEnumType
  liked: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type ArticleLikeCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [ArticleLike]
  totalCount: Int!
}

input ArticleDtoFilterInput {
  and: [ArticleDtoFilterInput!]
  or: [ArticleDtoFilterInput!]
  article: ArticleFilterInput
  isViewed: BooleanOperationFilterInput
  isSaved: BooleanOperationFilterInput
  isNotInterested: BooleanOperationFilterInput
  isLiked: BooleanOperationFilterInput
  isYourArticle: BooleanOperationFilterInput
  commentCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  viewCount: IntOperationFilterInput
  likeCount: IntOperationFilterInput
  notInterestedArticlesCount: IntOperationFilterInput
  articleItemsString: StringOperationFilterInput
  articleComments: ListFilterInputTypeOfArticleCommentDtoFilterInput
}

input ArticleDtoSortInput {
  article: ArticleSortInput
  isViewed: SortEnumType
  isSaved: SortEnumType
  isNotInterested: SortEnumType
  isLiked: SortEnumType
  isYourArticle: SortEnumType
  commentCount: SortEnumType
  shareCount: SortEnumType
  viewCount: SortEnumType
  likeCount: SortEnumType
  notInterestedArticlesCount: SortEnumType
  articleItemsString: SortEnumType
}

"""
A segment of a collection.
"""
type ArticleDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [ArticleDto]
  totalCount: Int!
}

input ArticleLikeDtoFilterInput {
  and: [ArticleLikeDtoFilterInput!]
  or: [ArticleLikeDtoFilterInput!]
  id: IntOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  isViewed: BooleanOperationFilterInput
  isSaved: BooleanOperationFilterInput
  isNotInterested: BooleanOperationFilterInput
  isLiked: BooleanOperationFilterInput
  isYourArticle: BooleanOperationFilterInput
  commentCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  viewCount: IntOperationFilterInput
  likeCount: IntOperationFilterInput
  articleItemsString: StringOperationFilterInput
}

input ArticleLikeDtoSortInput {
  id: SortEnumType
  createdDate: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  article: ArticleSortInput
  articleId: SortEnumType
  isViewed: SortEnumType
  isSaved: SortEnumType
  isNotInterested: SortEnumType
  isLiked: SortEnumType
  isYourArticle: SortEnumType
  commentCount: SortEnumType
  shareCount: SortEnumType
  viewCount: SortEnumType
  likeCount: SortEnumType
  articleItemsString: SortEnumType
}

"""
A segment of a collection.
"""
type ArticleLikeDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [ArticleLikeDto]
  totalCount: Int!
}

input UserViewArticleFilterInput {
  and: [UserViewArticleFilterInput!]
  or: [UserViewArticleFilterInput!]
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserViewArticleSortInput {
  article: ArticleSortInput
  articleId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserViewArticleCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserViewArticle]
  totalCount: Int!
}

input SaveArticleDtoFilterInput {
  and: [SaveArticleDtoFilterInput!]
  or: [SaveArticleDtoFilterInput!]
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  isViewed: BooleanOperationFilterInput
  isSaved: BooleanOperationFilterInput
  isNotInterested: BooleanOperationFilterInput
  isLiked: BooleanOperationFilterInput
  isYourArticle: BooleanOperationFilterInput
  commentCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  viewCount: IntOperationFilterInput
  likeCount: IntOperationFilterInput
}

input SaveArticleDtoSortInput {
  article: ArticleSortInput
  articleId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  isViewed: SortEnumType
  isSaved: SortEnumType
  isNotInterested: SortEnumType
  isLiked: SortEnumType
  isYourArticle: SortEnumType
  commentCount: SortEnumType
  shareCount: SortEnumType
  viewCount: SortEnumType
  likeCount: SortEnumType
}

"""
A segment of a collection.
"""
type SaveArticleDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [SaveArticleDto]
  totalCount: Int!
}

input BlockUserFilterInput {
  and: [BlockUserFilterInput!]
  or: [BlockUserFilterInput!]
  blockerId: IntOperationFilterInput
  blocker: UserFilterInput
  blockedId: IntOperationFilterInput
  blocked: UserFilterInput
  isMutual: BooleanOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input BlockUserSortInput {
  blockerId: SortEnumType
  blocker: UserSortInput
  blockedId: SortEnumType
  blocked: UserSortInput
  isMutual: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type BlockUserCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [BlockUser]
  totalCount: Int!
}

input CommentDtoFilterInput {
  and: [CommentDtoFilterInput!]
  or: [CommentDtoFilterInput!]
  comment: CommentFilterInput
  isLiked: BooleanOperationFilterInput
  likeCount: IntOperationFilterInput
  hasChild: BooleanOperationFilterInput
  childrenCount: IntOperationFilterInput
}

input CommentDtoSortInput {
  comment: CommentSortInput
  isLiked: SortEnumType
  likeCount: SortEnumType
  hasChild: SortEnumType
  childrenCount: SortEnumType
}

"""
A segment of a collection.
"""
type CommentDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [CommentDto]
  totalCount: Int!
}

input EventModelFilterInput {
  and: [EventModelFilterInput!]
  or: [EventModelFilterInput!]
  timeStamp: DateTimeOperationFilterInput
  version: IntOperationFilterInput
  eventType: StringOperationFilterInput
  eventData: StringOperationFilterInput
  admin: UserFilterInput
  adminId: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input EventModelSortInput {
  timeStamp: SortEnumType
  version: SortEnumType
  eventType: SortEnumType
  eventData: SortEnumType
  admin: UserSortInput
  adminId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type EventModelCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [EventModel]
  totalCount: Int!
}

input DiscountFilterInput {
  and: [DiscountFilterInput!]
  or: [DiscountFilterInput!]
  discountCode: StringOperationFilterInput
  percent: IntOperationFilterInput
  amount: FloatOperationFilterInput
  expireDate: DateTimeOperationFilterInput
  userDiscounts: ListFilterInputTypeOfUserDiscountFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input DiscountSortInput {
  discountCode: SortEnumType
  percent: SortEnumType
  amount: SortEnumType
  expireDate: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type DiscountCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Discount]
  totalCount: Int!
}

input UserFollowerFilterInput {
  and: [UserFollowerFilterInput!]
  or: [UserFollowerFilterInput!]
  followerId: IntOperationFilterInput
  follower: UserFilterInput
  followedId: IntOperationFilterInput
  followed: UserFilterInput
  isMutual: BooleanOperationFilterInput
  followedAt: DateTimeOperationFilterInput
  followeAcceptStatus: FolloweAcceptStatusOperationFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserFollowerSortInput {
  followerId: SortEnumType
  follower: UserSortInput
  followedId: SortEnumType
  followed: UserSortInput
  isMutual: SortEnumType
  followedAt: SortEnumType
  followeAcceptStatus: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserFollowerCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserFollower]
  totalCount: Int!
}

input HideStoryDtoFilterInput {
  and: [HideStoryDtoFilterInput!]
  or: [HideStoryDtoFilterInput!]
  follower: UserFilterInput
  isHided: BooleanOperationFilterInput
}

input HideStoryDtoSortInput {
  follower: UserSortInput
  isHided: SortEnumType
}

"""
A segment of a collection.
"""
type HideStoryDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [HideStoryDto]
  totalCount: Int!
}

input HighLightFilterInput {
  and: [HighLightFilterInput!]
  or: [HighLightFilterInput!]
  title: StringOperationFilterInput
  cover: StringOperationFilterInput
  stories: ListFilterInputTypeOfStoryFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input HighLightSortInput {
  title: SortEnumType
  cover: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type HighLightCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [HighLight]
  totalCount: Int!
}

input LikeArticleCommentFilterInput {
  and: [LikeArticleCommentFilterInput!]
  or: [LikeArticleCommentFilterInput!]
  articleComment: ArticleCommentFilterInput
  articleCommentId: IntOperationFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input LikeArticleCommentSortInput {
  articleComment: ArticleCommentSortInput
  articleCommentId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type LikeArticleCommentCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [LikeArticleComment]
  totalCount: Int!
}

input LikeCommentFilterInput {
  and: [LikeCommentFilterInput!]
  or: [LikeCommentFilterInput!]
  comment: CommentFilterInput
  commentId: IntOperationFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input LikeCommentSortInput {
  comment: CommentSortInput
  commentId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type LikeCommentCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [LikeComment]
  totalCount: Int!
}

input LinkFilterInput {
  and: [LinkFilterInput!]
  or: [LinkFilterInput!]
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  linkType: LinkTypeOperationFilterInput
  entityId: IntOperationFilterInput
  text: StringOperationFilterInput
  url: StringOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input LinkSortInput {
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  linkType: SortEnumType
  entityId: SortEnumType
  text: SortEnumType
  url: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type LinkCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Link]
  totalCount: Int!
}

input MessageDtoFilterInput {
  and: [MessageDtoFilterInput!]
  or: [MessageDtoFilterInput!]
  createdAt: DateTimeOperationFilterInput
  conversationId: IntOperationFilterInput
  conversation: ConversationFilterInput
  senderId: IntOperationFilterInput
  sender: UserFilterInput
  text: StringOperationFilterInput
  isSenderDeleted: BooleanOperationFilterInput
  isReceiverDeleted: BooleanOperationFilterInput
  messageType: MessageTypeOperationFilterInput
  contentAddress: StringOperationFilterInput
  groupId: IntOperationFilterInput
  isEdited: BooleanOperationFilterInput
  isSeen: BooleanOperationFilterInput
  seenDate: DateTimeOperationFilterInput
  receiverId: IntOperationFilterInput
  receiver: UserFilterInput
  profileId: IntOperationFilterInput
  profile: UserFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  story: StoryFilterInput
  storyId: IntOperationFilterInput
  parentMessage: MessageFilterInput
  parentMessageId: IntOperationFilterInput
  isDelivered: BooleanOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input MessageDtoSortInput {
  createdAt: SortEnumType
  conversationId: SortEnumType
  conversation: ConversationSortInput
  senderId: SortEnumType
  sender: UserSortInput
  text: SortEnumType
  isSenderDeleted: SortEnumType
  isReceiverDeleted: SortEnumType
  messageType: SortEnumType
  contentAddress: SortEnumType
  groupId: SortEnumType
  isEdited: SortEnumType
  isSeen: SortEnumType
  seenDate: SortEnumType
  receiverId: SortEnumType
  receiver: UserSortInput
  profileId: SortEnumType
  profile: UserSortInput
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  story: StorySortInput
  storyId: SortEnumType
  parentMessage: MessageSortInput
  parentMessageId: SortEnumType
  isDelivered: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type MessageDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [MessageDto]
  totalCount: Int!
}

input DiscussionsDtoFilterInput {
  and: [DiscussionsDtoFilterInput!]
  or: [DiscussionsDtoFilterInput!]
  id: IntOperationFilterInput
  conversationId: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
  messageType: MessageTypeOperationFilterInput
  post: PostFilterInput
  article: ArticleFilterInput
  isViewed: BooleanOperationFilterInput
  isSaved: BooleanOperationFilterInput
  isNotInterested: BooleanOperationFilterInput
  isLiked: BooleanOperationFilterInput
  isYours: BooleanOperationFilterInput
  commentCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  viewCount: IntOperationFilterInput
  likeCount: IntOperationFilterInput
  itemsString: StringOperationFilterInput
}

input DiscussionsDtoSortInput {
  id: SortEnumType
  conversationId: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
  messageType: SortEnumType
  post: PostSortInput
  article: ArticleSortInput
  isViewed: SortEnumType
  isSaved: SortEnumType
  isNotInterested: SortEnumType
  isLiked: SortEnumType
  isYours: SortEnumType
  commentCount: SortEnumType
  shareCount: SortEnumType
  viewCount: SortEnumType
  likeCount: SortEnumType
  itemsString: SortEnumType
}

"""
A segment of a collection.
"""
type DiscussionsDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [DiscussionsDto]
  totalCount: Int!
}

input ConversationDtoFilterInput {
  and: [ConversationDtoFilterInput!]
  or: [ConversationDtoFilterInput!]
  conversationId: IntOperationFilterInput
  user: UserFilterInput
  unreadCount: IntOperationFilterInput
  latestMessageDate: DateTimeOperationFilterInput
  isGroup: BooleanOperationFilterInput
  admin: UserFilterInput
  adminId: IntOperationFilterInput
  groupDescription: StringOperationFilterInput
  groupLink: StringOperationFilterInput
  isPrivate: BooleanOperationFilterInput
  groupName: StringOperationFilterInput
  groupImgageUrl: StringOperationFilterInput
  lastMessage: MessageFilterInput
  isFirstUserDeleted: BooleanOperationFilterInput
  firstUserDeletedDate: DateTimeOperationFilterInput
  isSecondUserDeleted: BooleanOperationFilterInput
  secondUserDeletedDate: DateTimeOperationFilterInput
  latestMessageUserId: IntOperationFilterInput
  userId: IntOperationFilterInput
  email: StringOperationFilterInput
  displayName: StringOperationFilterInput
  username: StringOperationFilterInput
  lastSeen: DateTimeOperationFilterInput
  imageAddress: StringOperationFilterInput
  cover: StringOperationFilterInput
  userTypes: NullableOfUserTypesOperationFilterInput
  dateOfBirth: DateTimeOperationFilterInput
  bio: StringOperationFilterInput
  groupMemberCount: IntOperationFilterInput
  isMemberOfGroup: BooleanOperationFilterInput
}

input ConversationDtoSortInput {
  conversationId: SortEnumType
  user: UserSortInput
  unreadCount: SortEnumType
  latestMessageDate: SortEnumType
  isGroup: SortEnumType
  admin: UserSortInput
  adminId: SortEnumType
  groupDescription: SortEnumType
  groupLink: SortEnumType
  isPrivate: SortEnumType
  groupName: SortEnumType
  groupImgageUrl: SortEnumType
  lastMessage: MessageSortInput
  isFirstUserDeleted: SortEnumType
  firstUserDeletedDate: SortEnumType
  isSecondUserDeleted: SortEnumType
  secondUserDeletedDate: SortEnumType
  latestMessageUserId: SortEnumType
  userId: SortEnumType
  email: SortEnumType
  displayName: SortEnumType
  username: SortEnumType
  lastSeen: SortEnumType
  imageAddress: SortEnumType
  cover: SortEnumType
  userTypes: SortEnumType
  dateOfBirth: SortEnumType
  bio: SortEnumType
  groupMemberCount: SortEnumType
  isMemberOfGroup: SortEnumType
}

"""
A segment of a collection.
"""
type ConversationDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [ConversationDto]
  totalCount: Int!
}

input UserMessageGroupFilterInput {
  and: [UserMessageGroupFilterInput!]
  or: [UserMessageGroupFilterInput!]
  isAdmin: BooleanOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  conversationId: IntOperationFilterInput
  conversation: ConversationFilterInput
  unreadCount: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserMessageGroupSortInput {
  isAdmin: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  conversationId: SortEnumType
  conversation: ConversationSortInput
  unreadCount: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserMessageGroupCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserMessageGroup]
  totalCount: Int!
}

input FollowUserForGroupDtoFilterInput {
  and: [FollowUserForGroupDtoFilterInput!]
  or: [FollowUserForGroupDtoFilterInput!]
  user: UserFilterInput
  isMemberOfGroup: BooleanOperationFilterInput
}

input FollowUserForGroupDtoSortInput {
  user: UserSortInput
  isMemberOfGroup: SortEnumType
}

"""
A segment of a collection.
"""
type FollowUserForGroupDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [FollowUserForGroupDto]
  totalCount: Int!
}

input NotificationDtoFilterInput {
  and: [NotificationDtoFilterInput!]
  or: [NotificationDtoFilterInput!]
  notification: NotificationFilterInput
  iFollowUser: UserFollowerFilterInput
}

input NotificationDtoSortInput {
  notification: NotificationSortInput
  iFollowUser: UserFollowerSortInput
}

"""
A segment of a collection.
"""
type NotificationDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [NotificationDto]
  totalCount: Int!
}

input NotInterestedPostFilterInput {
  and: [NotInterestedPostFilterInput!]
  or: [NotInterestedPostFilterInput!]
  post: PostFilterInput
  postId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input NotInterestedPostSortInput {
  post: PostSortInput
  postId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type NotInterestedPostCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [NotInterestedPost]
  totalCount: Int!
}

input PaymentFilterInput {
  and: [PaymentFilterInput!]
  or: [PaymentFilterInput!]
  createdAt: DateTimeOperationFilterInput
  amount: FloatOperationFilterInput
  amountWithoutDiscount: FloatOperationFilterInput
  discount: FloatOperationFilterInput
  user: UserFilterInput
  userId: IntOperationFilterInput
  paymentIntentId: StringOperationFilterInput
  transferId: StringOperationFilterInput
  paymentConfirmationStatus: PaymentConfirmationStatusOperationFilterInput
  paymentStatus: PaymentStatusOperationFilterInput
  isDeletedAccount: BooleanOperationFilterInput
  deleteAccountDate: DateTimeOperationFilterInput
  ads: AdsFilterInput
  adsId: IntOperationFilterInput
  usersSubscriptionId: IntOperationFilterInput
  usersSubscription: UsersSubscriptionFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input PaymentSortInput {
  createdAt: SortEnumType
  amount: SortEnumType
  amountWithoutDiscount: SortEnumType
  discount: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  paymentIntentId: SortEnumType
  transferId: SortEnumType
  paymentConfirmationStatus: SortEnumType
  paymentStatus: SortEnumType
  isDeletedAccount: SortEnumType
  deleteAccountDate: SortEnumType
  ads: AdsSortInput
  adsId: SortEnumType
  usersSubscriptionId: SortEnumType
  usersSubscription: UsersSubscriptionSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type PaymentCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Payment]
  totalCount: Int!
}

input StripeAccountRequirementsErrorFilterInput {
  and: [StripeAccountRequirementsErrorFilterInput!]
  or: [StripeAccountRequirementsErrorFilterInput!]
  code: StringOperationFilterInput
  reason: StringOperationFilterInput
  requirement: StringOperationFilterInput
}

input StripeAccountRequirementsErrorSortInput {
  code: SortEnumType
  reason: SortEnumType
  requirement: SortEnumType
}

"""
A segment of a collection.
"""
type StripeAccountRequirementsErrorCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [StripeAccountRequirementsError]
  totalCount: Int!
}

input PlaceFilterInput {
  and: [PlaceFilterInput!]
  or: [PlaceFilterInput!]
  location: StringOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input PlaceSortInput {
  location: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type PlaceCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Place]
  totalCount: Int!
}

input PostDtoFilterInput {
  and: [PostDtoFilterInput!]
  or: [PostDtoFilterInput!]
  post: PostFilterInput
  isViewed: BooleanOperationFilterInput
  isSaved: BooleanOperationFilterInput
  isNotInterested: BooleanOperationFilterInput
  isLiked: BooleanOperationFilterInput
  isYourPost: BooleanOperationFilterInput
  commentCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  viewCount: IntOperationFilterInput
  likeCount: IntOperationFilterInput
  notInterestedPostsCount: IntOperationFilterInput
  postItemsString: StringOperationFilterInput
  isCompletedPayment: BooleanOperationFilterInput
  postComments: ListFilterInputTypeOfCommentDtoFilterInput
}

input PostDtoSortInput {
  post: PostSortInput
  isViewed: SortEnumType
  isSaved: SortEnumType
  isNotInterested: SortEnumType
  isLiked: SortEnumType
  isYourPost: SortEnumType
  commentCount: SortEnumType
  shareCount: SortEnumType
  viewCount: SortEnumType
  likeCount: SortEnumType
  notInterestedPostsCount: SortEnumType
  postItemsString: SortEnumType
  isCompletedPayment: SortEnumType
}

"""
A segment of a collection.
"""
type PostDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [PostDto]
  totalCount: Int!
}

input PostLikesDtoFilterInput {
  and: [PostLikesDtoFilterInput!]
  or: [PostLikesDtoFilterInput!]
  id: IntOperationFilterInput
  userId: IntOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  user: UserFilterInput
  postId: IntOperationFilterInput
  post: PostFilterInput
  isViewed: BooleanOperationFilterInput
  isSaved: BooleanOperationFilterInput
  isNotInterested: BooleanOperationFilterInput
  isLiked: BooleanOperationFilterInput
  isYourPost: BooleanOperationFilterInput
  commentCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  viewCount: IntOperationFilterInput
  likeCount: IntOperationFilterInput
  postItemsString: StringOperationFilterInput
}

input PostLikesDtoSortInput {
  id: SortEnumType
  userId: SortEnumType
  createdDate: SortEnumType
  user: UserSortInput
  postId: SortEnumType
  post: PostSortInput
  isViewed: SortEnumType
  isSaved: SortEnumType
  isNotInterested: SortEnumType
  isLiked: SortEnumType
  isYourPost: SortEnumType
  commentCount: SortEnumType
  shareCount: SortEnumType
  viewCount: SortEnumType
  likeCount: SortEnumType
  postItemsString: SortEnumType
}

"""
A segment of a collection.
"""
type PostLikesDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [PostLikesDto]
  totalCount: Int!
}

input UserViewPostFilterInput {
  and: [UserViewPostFilterInput!]
  or: [UserViewPostFilterInput!]
  post: PostFilterInput
  postId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserViewPostSortInput {
  post: PostSortInput
  postId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserViewPostCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserViewPost]
  totalCount: Int!
}

input SavePostDtoFilterInput {
  and: [SavePostDtoFilterInput!]
  or: [SavePostDtoFilterInput!]
  post: PostFilterInput
  postId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  isViewed: BooleanOperationFilterInput
  isSaved: BooleanOperationFilterInput
  isNotInterested: BooleanOperationFilterInput
  isLiked: BooleanOperationFilterInput
  isYourPost: BooleanOperationFilterInput
  commentCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  viewCount: IntOperationFilterInput
  likeCount: IntOperationFilterInput
}

input SavePostDtoSortInput {
  post: PostSortInput
  postId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  isViewed: SortEnumType
  isSaved: SortEnumType
  isNotInterested: SortEnumType
  isLiked: SortEnumType
  isYourPost: SortEnumType
  commentCount: SortEnumType
  shareCount: SortEnumType
  viewCount: SortEnumType
  likeCount: SortEnumType
}

"""
A segment of a collection.
"""
type SavePostDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [SavePostDto]
  totalCount: Int!
}

input PublicNotificationFilterInput {
  and: [PublicNotificationFilterInput!]
  or: [PublicNotificationFilterInput!]
  text: StringOperationFilterInput
  fromAge: IntOperationFilterInput
  toAge: IntOperationFilterInput
  gender: GenderOperationFilterInput
  isSendAll: BooleanOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input PublicNotificationSortInput {
  text: SortEnumType
  fromAge: SortEnumType
  toAge: SortEnumType
  gender: SortEnumType
  isSendAll: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type PublicNotificationCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [PublicNotification]
  totalCount: Int!
}

input ReportFilterInput {
  and: [ReportFilterInput!]
  or: [ReportFilterInput!]
  text: StringOperationFilterInput
  reason: StringOperationFilterInput
  email: StringOperationFilterInput
  reportType: ReportTypeOperationFilterInput
  reporterId: IntOperationFilterInput
  reporter: UserFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  comment: CommentFilterInput
  commentId: IntOperationFilterInput
  articleComment: ArticleCommentFilterInput
  articleCommentId: IntOperationFilterInput
  reported: UserFilterInput
  reportedId: IntOperationFilterInput
  message: MessageFilterInput
  messageId: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ReportSortInput {
  text: SortEnumType
  reason: SortEnumType
  email: SortEnumType
  reportType: SortEnumType
  reporterId: SortEnumType
  reporter: UserSortInput
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  comment: CommentSortInput
  commentId: SortEnumType
  articleComment: ArticleCommentSortInput
  articleCommentId: SortEnumType
  reported: UserSortInput
  reportedId: SortEnumType
  message: MessageSortInput
  messageId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type ReportCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Report]
  totalCount: Int!
}

input SecretMessageDtoFilterInput {
  and: [SecretMessageDtoFilterInput!]
  or: [SecretMessageDtoFilterInput!]
  secretConversation: SecretConversationFilterInput
  senderId: IntOperationFilterInput
  sender: UserFilterInput
  aesEncryptedText: StringOperationFilterInput
  aesKeyEncryptedByRsaUsingSenderPublicKey: StringOperationFilterInput
  aesIvEncryptedByRsaUsingSenderPublicKey: StringOperationFilterInput
  aesKeyEncryptedByRsaUsingReceiverPublicKey: StringOperationFilterInput
  aesIvEncryptedByRsaUsingReceiverPublicKey: StringOperationFilterInput
  isSenderDeleted: BooleanOperationFilterInput
  isReceiverDeleted: BooleanOperationFilterInput
  aesEncryptedMessageType: StringOperationFilterInput
  aesEncryptedContentAddress: StringOperationFilterInput
  isSeen: BooleanOperationFilterInput
  receiverId: IntOperationFilterInput
  receiver: UserFilterInput
  aesEncryptedProfile: StringOperationFilterInput
  aesEncryptedPost: StringOperationFilterInput
  aesEncryptedArticle: StringOperationFilterInput
  aesEncryptedStory: StringOperationFilterInput
  parentSecretMessage: SecretMessageFilterInput
  parentMessageId: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SecretMessageDtoSortInput {
  secretConversation: SecretConversationSortInput
  senderId: SortEnumType
  sender: UserSortInput
  aesEncryptedText: SortEnumType
  aesKeyEncryptedByRsaUsingSenderPublicKey: SortEnumType
  aesIvEncryptedByRsaUsingSenderPublicKey: SortEnumType
  aesKeyEncryptedByRsaUsingReceiverPublicKey: SortEnumType
  aesIvEncryptedByRsaUsingReceiverPublicKey: SortEnumType
  isSenderDeleted: SortEnumType
  isReceiverDeleted: SortEnumType
  aesEncryptedMessageType: SortEnumType
  aesEncryptedContentAddress: SortEnumType
  isSeen: SortEnumType
  receiverId: SortEnumType
  receiver: UserSortInput
  aesEncryptedProfile: SortEnumType
  aesEncryptedPost: SortEnumType
  aesEncryptedArticle: SortEnumType
  aesEncryptedStory: SortEnumType
  parentSecretMessage: SecretMessageSortInput
  parentMessageId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type SecretMessageDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [SecretMessageDto]
  totalCount: Int!
}

input SecretConversationDtoFilterInput {
  and: [SecretConversationDtoFilterInput!]
  or: [SecretConversationDtoFilterInput!]
  conversationId: IntOperationFilterInput
  user: UserFilterInput
  unreadCount: IntOperationFilterInput
  latestMessageDate: DateTimeOperationFilterInput
  lastMessage: SecretMessageFilterInput
  isFirstUserDeleted: BooleanOperationFilterInput
  firstUserDeletedDate: DateTimeOperationFilterInput
  isSecondUserDeleted: BooleanOperationFilterInput
  secondUserDeletedDate: DateTimeOperationFilterInput
  latestMessageUserId: IntOperationFilterInput
  email: StringOperationFilterInput
  displayName: StringOperationFilterInput
  username: StringOperationFilterInput
  lastSeen: DateTimeOperationFilterInput
  imageAddress: StringOperationFilterInput
  cover: StringOperationFilterInput
  userTypes: NullableOfUserTypesOperationFilterInput
}

input SecretConversationDtoSortInput {
  conversationId: SortEnumType
  user: UserSortInput
  unreadCount: SortEnumType
  latestMessageDate: SortEnumType
  lastMessage: SecretMessageSortInput
  isFirstUserDeleted: SortEnumType
  firstUserDeletedDate: SortEnumType
  isSecondUserDeleted: SortEnumType
  secondUserDeletedDate: SortEnumType
  latestMessageUserId: SortEnumType
  email: SortEnumType
  displayName: SortEnumType
  username: SortEnumType
  lastSeen: SortEnumType
  imageAddress: SortEnumType
  cover: SortEnumType
  userTypes: SortEnumType
}

"""
A segment of a collection.
"""
type SecretConversationDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [SecretConversationDto]
  totalCount: Int!
}

input SecurityQuestionFilterInput {
  and: [SecurityQuestionFilterInput!]
  or: [SecurityQuestionFilterInput!]
  question: StringOperationFilterInput
  securityAnswers: ListFilterInputTypeOfSecurityAnswerFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SecurityQuestionSortInput {
  question: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type SecurityQuestionCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [SecurityQuestion]
  totalCount: Int!
}

input StoryCommentFilterInput {
  and: [StoryCommentFilterInput!]
  or: [StoryCommentFilterInput!]
  text: StringOperationFilterInput
  story: StoryFilterInput
  storyId: IntOperationFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input StoryCommentSortInput {
  text: SortEnumType
  story: StorySortInput
  storyId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type StoryCommentCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [StoryComment]
  totalCount: Int!
}

input StoryUserDtoFilterInput {
  and: [StoryUserDtoFilterInput!]
  or: [StoryUserDtoFilterInput!]
  stories: ListFilterInputTypeOfStoryFilterInput
  hasNotSeenedStory: BooleanOperationFilterInput
  storyOwner: UserFilterInput
  storyCount: IntOperationFilterInput
  seenedStoryCount: IntOperationFilterInput
}

input StoryUserDtoSortInput {
  hasNotSeenedStory: SortEnumType
  storyOwner: UserSortInput
  storyCount: SortEnumType
  seenedStoryCount: SortEnumType
}

"""
A segment of a collection.
"""
type StoryUserDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [StoryUserDto]
  totalCount: Int!
}

input StoryDtoFilterInput {
  and: [StoryDtoFilterInput!]
  or: [StoryDtoFilterInput!]
  id: IntOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  userId: IntOperationFilterInput
  contentAddress: StringOperationFilterInput
  storyType: StoryTypeOperationFilterInput
  link: StringOperationFilterInput
  text: StringOperationFilterInput
  highLight: HighLightFilterInput
  highLightId: IntOperationFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  duration: IntOperationFilterInput
  isLiked: BooleanOperationFilterInput
  likeCount: IntOperationFilterInput
  storySeensCount: IntOperationFilterInput
  commentCount: IntOperationFilterInput
  deletedBy: DeletedByOperationFilterInput
}

input StoryDtoSortInput {
  id: SortEnumType
  createdDate: SortEnumType
  userId: SortEnumType
  contentAddress: SortEnumType
  storyType: SortEnumType
  link: SortEnumType
  text: SortEnumType
  highLight: HighLightSortInput
  highLightId: SortEnumType
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  duration: SortEnumType
  isLiked: SortEnumType
  likeCount: SortEnumType
  storySeensCount: SortEnumType
  commentCount: SortEnumType
  deletedBy: SortEnumType
}

"""
A segment of a collection.
"""
type StoryDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [StoryDto]
  totalCount: Int!
}

input StoryLikeFilterInput {
  and: [StoryLikeFilterInput!]
  or: [StoryLikeFilterInput!]
  story: StoryFilterInput
  storyId: IntOperationFilterInput
  liked: BooleanOperationFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input StoryLikeSortInput {
  story: StorySortInput
  storyId: SortEnumType
  liked: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type StoryLikeCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [StoryLike]
  totalCount: Int!
}

input StorySeenDtoFilterInput {
  and: [StorySeenDtoFilterInput!]
  or: [StorySeenDtoFilterInput!]
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  story: StoryFilterInput
  storyId: IntOperationFilterInput
  isLiked: BooleanOperationFilterInput
}

input StorySeenDtoSortInput {
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  story: StorySortInput
  storyId: SortEnumType
  isLiked: SortEnumType
}

"""
A segment of a collection.
"""
type StorySeenDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [StorySeenDto]
  totalCount: Int!
}

input StrikeFilterInput {
  and: [StrikeFilterInput!]
  or: [StrikeFilterInput!]
  text: StringOperationFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input StrikeSortInput {
  text: SortEnumType
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type StrikeCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Strike]
  totalCount: Int!
}

input StrikeDtoFilterInput {
  and: [StrikeDtoFilterInput!]
  or: [StrikeDtoFilterInput!]
  strikeCount: IntOperationFilterInput
  text: StringOperationFilterInput
  user: UserFilterInput
}

input StrikeDtoSortInput {
  strikeCount: SortEnumType
  text: SortEnumType
  user: UserSortInput
}

"""
A segment of a collection.
"""
type StrikeDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [StrikeDto]
  totalCount: Int!
}

input SubscriptionPlanDtoFilterInput {
  and: [SubscriptionPlanDtoFilterInput!]
  or: [SubscriptionPlanDtoFilterInput!]
  id: IntOperationFilterInput
  price: FloatOperationFilterInput
  title: StringOperationFilterInput
  supportbadge: BooleanOperationFilterInput
  removeAds: BooleanOperationFilterInput
  allowDownloadPost: BooleanOperationFilterInput
  addedToCouncilGroup: BooleanOperationFilterInput
  content: SubscriptionPlanContentDtoFilterInput
}

input SubscriptionPlanDtoSortInput {
  id: SortEnumType
  price: SortEnumType
  title: SortEnumType
  supportbadge: SortEnumType
  removeAds: SortEnumType
  allowDownloadPost: SortEnumType
  addedToCouncilGroup: SortEnumType
  content: SubscriptionPlanContentDtoSortInput
}

"""
A segment of a collection.
"""
type SubscriptionPlanDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [SubscriptionPlanDto]
  totalCount: Int!
}

input SupportFilterInput {
  and: [SupportFilterInput!]
  or: [SupportFilterInput!]
  email: StringOperationFilterInput
  text: StringOperationFilterInput
  category: StringOperationFilterInput
  user: UserFilterInput
  userId: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SupportSortInput {
  email: SortEnumType
  text: SortEnumType
  category: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type SupportCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Support]
  totalCount: Int!
}

input SuspendFilterInput {
  and: [SuspendFilterInput!]
  or: [SuspendFilterInput!]
  dayCount: IntOperationFilterInput
  suspensionLiftingDate: DateTimeOperationFilterInput
  suspendType: SuspendTypeOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SuspendSortInput {
  dayCount: SortEnumType
  suspensionLiftingDate: SortEnumType
  suspendType: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type SuspendCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [Suspend]
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type TagConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TagEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Tag]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  isDeletedAccount: BooleanOperationFilterInput
  deleteAccountDate: DateTimeOperationFilterInput
  linkBio: StringOperationFilterInput
  stripeAccountId: StringOperationFilterInput
  stripeCustomerId: StringOperationFilterInput
  subscriptionId: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  isSuspended: BooleanOperationFilterInput
  suspensionLiftingDate: DateTimeOperationFilterInput
  userTypes: UserTypesOperationFilterInput
  bio: StringOperationFilterInput
  displayName: StringOperationFilterInput
  legalName: StringOperationFilterInput
  username: StringOperationFilterInput
  dateOfBirth: DateTimeOperationFilterInput
  phoneNumber: StringOperationFilterInput
  countryCode: StringOperationFilterInput
  phoneNumberConfirmed: BooleanOperationFilterInput
  isVerified: BooleanOperationFilterInput
  imageAddress: StringOperationFilterInput
  cover: StringOperationFilterInput
  gender: GenderOperationFilterInput
  location: StringOperationFilterInput
  ip: StringOperationFilterInput
  directNotification: BooleanOperationFilterInput
  followeBacknotification: BooleanOperationFilterInput
  likeNotification: BooleanOperationFilterInput
  commentNotification: BooleanOperationFilterInput
  privateAccount: BooleanOperationFilterInput
  professionalAccount: BooleanOperationFilterInput
  lastSeen: DateTimeOperationFilterInput
  saveArticles: ListFilterInputTypeOfSaveArticleFilterInput
  userDiscounts: ListFilterInputTypeOfUserDiscountFilterInput
  commentPosts: ListFilterInputTypeOfCommentFilterInput
  savePosts: ListFilterInputTypeOfSavePostFilterInput
  notInterestedPosts: ListFilterInputTypeOfNotInterestedPostFilterInput
  interestedUsers: ListFilterInputTypeOfInterestedUserFilterInput
  eventModels: ListFilterInputTypeOfEventModelFilterInput
  appealAdss: ListFilterInputTypeOfAppealAdsFilterInput
  notInterestedPostIds: ListIntOperationFilterInput
  commentMentions: ListFilterInputTypeOfCommentFilterInput
  articleCommentMentions: ListFilterInputTypeOfArticleCommentFilterInput
  blockers: ListFilterInputTypeOfBlockUserFilterInput
  blocks: ListFilterInputTypeOfBlockUserFilterInput
  userSearchArticles: ListFilterInputTypeOfUserSearchArticleFilterInput
  notInterestedArticleIds: ListIntOperationFilterInput
  userViewArticles: ListFilterInputTypeOfUserViewArticleFilterInput
  followers: ListFilterInputTypeOfUserFollowerFilterInput
  followees: ListFilterInputTypeOfUserFollowerFilterInput
  resetPasswordRequests: ListFilterInputTypeOfResetPasswordRequestFilterInput
  externalId: StringOperationFilterInput
  email: StringOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserSortInput {
  isDeletedAccount: SortEnumType
  deleteAccountDate: SortEnumType
  linkBio: SortEnumType
  stripeAccountId: SortEnumType
  stripeCustomerId: SortEnumType
  subscriptionId: SortEnumType
  isActive: SortEnumType
  isSuspended: SortEnumType
  suspensionLiftingDate: SortEnumType
  userTypes: SortEnumType
  bio: SortEnumType
  displayName: SortEnumType
  legalName: SortEnumType
  username: SortEnumType
  dateOfBirth: SortEnumType
  phoneNumber: SortEnumType
  countryCode: SortEnumType
  phoneNumberConfirmed: SortEnumType
  isVerified: SortEnumType
  imageAddress: SortEnumType
  cover: SortEnumType
  gender: SortEnumType
  location: SortEnumType
  ip: SortEnumType
  directNotification: SortEnumType
  followeBacknotification: SortEnumType
  likeNotification: SortEnumType
  commentNotification: SortEnumType
  privateAccount: SortEnumType
  professionalAccount: SortEnumType
  lastSeen: SortEnumType
  externalId: SortEnumType
  email: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [User]
  totalCount: Int!
}

input UserSusciopiousDtoFilterInput {
  and: [UserSusciopiousDtoFilterInput!]
  or: [UserSusciopiousDtoFilterInput!]
  id: IntOperationFilterInput
  userId: IntOperationFilterInput
  displayName: StringOperationFilterInput
  userAgent: StringOperationFilterInput
  sigInIp: StringOperationFilterInput
  sigInTime: DateTimeOperationFilterInput
  signOutIp: StringOperationFilterInput
  sigOutTime: DateTimeOperationFilterInput
  isSuspicious: BooleanOperationFilterInput
  imageAddress: StringOperationFilterInput
  cover: StringOperationFilterInput
  userName: StringOperationFilterInput
}

input UserSusciopiousDtoSortInput {
  id: SortEnumType
  userId: SortEnumType
  displayName: SortEnumType
  userAgent: SortEnumType
  sigInIp: SortEnumType
  sigInTime: SortEnumType
  signOutIp: SortEnumType
  sigOutTime: SortEnumType
  isSuspicious: SortEnumType
  imageAddress: SortEnumType
  cover: SortEnumType
  userName: SortEnumType
}

"""
A segment of a collection.
"""
type UserSusciopiousDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserSusciopiousDto]
  totalCount: Int!
}

input ResetPasswordRequestFilterInput {
  and: [ResetPasswordRequestFilterInput!]
  or: [ResetPasswordRequestFilterInput!]
  governmentIssuePhotoId: StringOperationFilterInput
  otherFiles: ListStringOperationFilterInput
  username: StringOperationFilterInput
  legalName: StringOperationFilterInput
  displayName: StringOperationFilterInput
  dateOfBirth: DateTimeOperationFilterInput
  gender: GenderOperationFilterInput
  contactEmailOrUsername: StringOperationFilterInput
  proofOfAddress: StringOperationFilterInput
  status: ResetPasswordRequestStatusOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ResetPasswordRequestSortInput {
  governmentIssuePhotoId: SortEnumType
  username: SortEnumType
  legalName: SortEnumType
  displayName: SortEnumType
  dateOfBirth: SortEnumType
  gender: SortEnumType
  contactEmailOrUsername: SortEnumType
  proofOfAddress: SortEnumType
  status: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type ResetPasswordRequestCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [ResetPasswordRequest]
  totalCount: Int!
}

input UserSearchAccountFilterInput {
  and: [UserSearchAccountFilterInput!]
  or: [UserSearchAccountFilterInput!]
  searcherId: IntOperationFilterInput
  searcher: UserFilterInput
  searchedId: IntOperationFilterInput
  searched: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserSearchAccountSortInput {
  searcherId: SortEnumType
  searcher: UserSortInput
  searchedId: SortEnumType
  searched: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserSearchAccountCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserSearchAccount]
  totalCount: Int!
}

input UserSearchArticleFilterInput {
  and: [UserSearchArticleFilterInput!]
  or: [UserSearchArticleFilterInput!]
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserSearchArticleSortInput {
  article: ArticleSortInput
  articleId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserSearchArticleCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserSearchArticle]
  totalCount: Int!
}

input UserSearchGroupDtoFilterInput {
  and: [UserSearchGroupDtoFilterInput!]
  or: [UserSearchGroupDtoFilterInput!]
  conversation: ConversationFilterInput
  conversationId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  memberCount: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserSearchGroupDtoSortInput {
  conversation: ConversationSortInput
  conversationId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  memberCount: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserSearchGroupDtoCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserSearchGroupDto]
  totalCount: Int!
}

input UserSearchPlaceFilterInput {
  and: [UserSearchPlaceFilterInput!]
  or: [UserSearchPlaceFilterInput!]
  place: StringOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserSearchPlaceSortInput {
  place: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserSearchPlaceCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserSearchPlace]
  totalCount: Int!
}

input UserSearchTagFilterInput {
  and: [UserSearchTagFilterInput!]
  or: [UserSearchTagFilterInput!]
  tag: StringOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserSearchTagSortInput {
  tag: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserSearchTagCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserSearchTag]
  totalCount: Int!
}

input UserVisitLinkFilterInput {
  and: [UserVisitLinkFilterInput!]
  or: [UserVisitLinkFilterInput!]
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  linkType: LinkTypeOperationFilterInput
  text: StringOperationFilterInput
  link: StringOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserVisitLinkSortInput {
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  linkType: SortEnumType
  text: SortEnumType
  link: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type UserVisitLinkCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [UserVisitLink]
  totalCount: Int!
}

input VerificationRequestFilterInput {
  and: [VerificationRequestFilterInput!]
  or: [VerificationRequestFilterInput!]
  verificationRequestAcceptStatus: VerificationRequestAcceptStatusOperationFilterInput
  proofOfAddress: StringOperationFilterInput
  governmentIssuePhotoId: StringOperationFilterInput
  otheFiles: ListStringOperationFilterInput
  reasonReject: StringOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input VerificationRequestSortInput {
  verificationRequestAcceptStatus: SortEnumType
  proofOfAddress: SortEnumType
  governmentIssuePhotoId: SortEnumType
  reasonReject: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type VerificationRequestCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [VerificationRequest]
  totalCount: Int!
}

input WarningBannerFilterInput {
  and: [WarningBannerFilterInput!]
  or: [WarningBannerFilterInput!]
  description: StringOperationFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input WarningBannerSortInput {
  description: SortEnumType
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

"""
A segment of a collection.
"""
type WarningBannerCollectionSegment {
  """
  Information to aid in pagination.
  """
  pageInfo: CollectionSegmentInfo!

  """
  A flattened list of the items.
  """
  items: [WarningBanner]
  totalCount: Int!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfUserViewTagFilterInput {
  all: UserViewTagFilterInput
  none: UserViewTagFilterInput
  some: UserViewTagFilterInput
  any: Boolean
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

enum SortEnumType {
  ASC
  DESC
}

"""
Information about the offset pagination.
"""
type CollectionSegmentInfo {
  """
  Indicates whether more items exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more items exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!
}

type Tag {
  text: String
  hits: Int!
  userViewTags: [UserViewTag]
  usesCount: Int!
  likesCount: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input StoryFilterInput {
  and: [StoryFilterInput!]
  or: [StoryFilterInput!]
  contentAddress: StringOperationFilterInput
  storyType: StoryTypeOperationFilterInput
  link: StringOperationFilterInput
  text: StringOperationFilterInput
  deletedBy: DeletedByOperationFilterInput
  highLight: HighLightFilterInput
  highLightId: IntOperationFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  duration: IntOperationFilterInput
  storyComments: ListFilterInputTypeOfStoryCommentFilterInput
  storyLikes: ListFilterInputTypeOfStoryLikeFilterInput
  storySeens: ListFilterInputTypeOfStorySeenFilterInput
  messages: ListFilterInputTypeOfMessageFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input StorySortInput {
  contentAddress: SortEnumType
  storyType: SortEnumType
  link: SortEnumType
  text: SortEnumType
  deletedBy: SortEnumType
  highLight: HighLightSortInput
  highLightId: SortEnumType
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  duration: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

type StorySeen {
  story: Story
  storyId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type HideStory {
  hider: User
  hiderId: Int!
  hided: User
  hidedId: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type SecurityAnswer {
  user: User
  userId: Int!
  securityQuestion: SecurityQuestion
  securityQuestionId: Int!
  answer: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserClaimsViewModel {
  type: String
  value: String
  selected: Boolean!
}

input NotificationTypeOperationFilterInput {
  eq: NotificationType
  neq: NotificationType
  in: [NotificationType!]
  nin: [NotificationType!]
}

input PostLikesFilterInput {
  and: [PostLikesFilterInput!]
  or: [PostLikesFilterInput!]
  userId: IntOperationFilterInput
  user: UserFilterInput
  postId: IntOperationFilterInput
  post: PostFilterInput
  liked: BooleanOperationFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input PostFilterInput {
  and: [PostFilterInput!]
  or: [PostFilterInput!]
  comments: ListFilterInputTypeOfCommentFilterInput
  posterId: IntOperationFilterInput
  poster: UserFilterInput
  postedAt: DateTimeOperationFilterInput
  likes: ListFilterInputTypeOfPostLikesFilterInput
  isPromote: BooleanOperationFilterInput
  latestPromoteDate: DateTimeOperationFilterInput
  isCompletedPayment: BooleanOperationFilterInput
  yourMind: StringOperationFilterInput
  deletedBy: DeletedByOperationFilterInput
  allowDownload: BooleanOperationFilterInput
  location: StringOperationFilterInput
  isPin: BooleanOperationFilterInput
  pinDate: DateTimeOperationFilterInput
  postType: PostTypeOperationFilterInput
  isByAdmin: BooleanOperationFilterInput
  hits: IntOperationFilterInput
  thisWeekHits: IntOperationFilterInput
  savePostsCount: IntOperationFilterInput
  thisWeekSavePostsCount: IntOperationFilterInput
  commentsCount: IntOperationFilterInput
  thisWeekCommentsCount: IntOperationFilterInput
  likesCount: IntOperationFilterInput
  thisWeekLikesCount: IntOperationFilterInput
  notInterestedPostsCount: IntOperationFilterInput
  thisWeekNotInterestedPostsCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  thisWeekShareCount: IntOperationFilterInput
  latestUpdateThisWeeks: DateTimeOperationFilterInput
  isEdited: BooleanOperationFilterInput
  isCreatedInGroup: BooleanOperationFilterInput
  warningBanners: ListFilterInputTypeOfWarningBannerFilterInput
  userViewPosts: ListFilterInputTypeOfUserViewPostFilterInput
  stories: ListFilterInputTypeOfStoryFilterInput
  savePosts: ListFilterInputTypeOfSavePostFilterInput
  postItemsString: StringOperationFilterInput
  adses: ListFilterInputTypeOfAdsFilterInput
  userSearchPosts: ListFilterInputTypeOfUserSearchPostFilterInput
  messages: ListFilterInputTypeOfMessageFilterInput
  notInterestedPosts: ListFilterInputTypeOfNotInterestedPostFilterInput
  interestedUsers: ListFilterInputTypeOfInterestedUserFilterInput
  reports: ListFilterInputTypeOfReportFilterInput
  tags: ListStringOperationFilterInput
  stringTags: StringOperationFilterInput
  userVisitLinks: ListFilterInputTypeOfUserVisitLinkFilterInput
  links: ListFilterInputTypeOfLinkFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  strikes: ListFilterInputTypeOfStrikeFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ArticleFilterInput {
  and: [ArticleFilterInput!]
  or: [ArticleFilterInput!]
  isPromote: BooleanOperationFilterInput
  latestPromoteDate: DateTimeOperationFilterInput
  isCompletedPayment: BooleanOperationFilterInput
  author: StringOperationFilterInput
  title: StringOperationFilterInput
  subTitle: StringOperationFilterInput
  isCreatedInGroup: BooleanOperationFilterInput
  articleType: ArticleTypeOperationFilterInput
  deletedBy: DeletedByOperationFilterInput
  isPin: BooleanOperationFilterInput
  pinDate: DateTimeOperationFilterInput
  isVerifield: BooleanOperationFilterInput
  isByAdmin: BooleanOperationFilterInput
  hits: IntOperationFilterInput
  thisWeekHits: IntOperationFilterInput
  saveArticlesCount: IntOperationFilterInput
  thisWeekSaveArticlesCount: IntOperationFilterInput
  articleCommentsCount: IntOperationFilterInput
  thisWeekArticleCommentsCount: IntOperationFilterInput
  articleLikesCount: IntOperationFilterInput
  thisWeekArticleLikesCount: IntOperationFilterInput
  notInterestedArticlesCount: IntOperationFilterInput
  thisWeekNotInterestedArticlesCount: IntOperationFilterInput
  shareCount: IntOperationFilterInput
  thisWeekShareCount: IntOperationFilterInput
  latestUpdateThisWeeks: DateTimeOperationFilterInput
  isEdited: BooleanOperationFilterInput
  articleItems: ListFilterInputTypeOfArticleItemFilterInput
  articleItemsString: StringOperationFilterInput
  adses: ListFilterInputTypeOfAdsFilterInput
  stories: ListFilterInputTypeOfStoryFilterInput
  saveArticles: ListFilterInputTypeOfSaveArticleFilterInput
  articleLikes: ListFilterInputTypeOfArticleLikeFilterInput
  articleComments: ListFilterInputTypeOfArticleCommentFilterInput
  userSearchArticles: ListFilterInputTypeOfUserSearchArticleFilterInput
  messages: ListFilterInputTypeOfMessageFilterInput
  notInterestedArticles: ListFilterInputTypeOfNotInterestedArticleFilterInput
  userViewArticles: ListFilterInputTypeOfUserViewArticleFilterInput
  interestedUsers: ListFilterInputTypeOfInterestedUserFilterInput
  reports: ListFilterInputTypeOfReportFilterInput
  userVisitLinks: ListFilterInputTypeOfUserVisitLinkFilterInput
  links: ListFilterInputTypeOfLinkFilterInput
  strikes: ListFilterInputTypeOfStrikeFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  warningBanners: ListFilterInputTypeOfWarningBannerFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input CommentFilterInput {
  and: [CommentFilterInput!]
  or: [CommentFilterInput!]
  postId: IntOperationFilterInput
  post: PostFilterInput
  deletedBy: DeletedByOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  mentionId: IntOperationFilterInput
  mention: UserFilterInput
  createdAt: DateTimeOperationFilterInput
  parentId: IntOperationFilterInput
  parent: CommentFilterInput
  children: ListFilterInputTypeOfCommentFilterInput
  text: StringOperationFilterInput
  commentType: CommentTypeOperationFilterInput
  contentAddress: StringOperationFilterInput
  isEdited: BooleanOperationFilterInput
  likeCount: IntOperationFilterInput
  likeComments: ListFilterInputTypeOfLikeCommentFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  reports: ListFilterInputTypeOfReportFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ArticleCommentFilterInput {
  and: [ArticleCommentFilterInput!]
  or: [ArticleCommentFilterInput!]
  text: StringOperationFilterInput
  commentType: CommentTypeOperationFilterInput
  contentAddress: StringOperationFilterInput
  isEdited: BooleanOperationFilterInput
  deletedBy: DeletedByOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  parentId: IntOperationFilterInput
  parent: ArticleCommentFilterInput
  mentionId: IntOperationFilterInput
  mention: UserFilterInput
  likeCount: IntOperationFilterInput
  children: ListFilterInputTypeOfArticleCommentFilterInput
  likeArticleComments: ListFilterInputTypeOfLikeArticleCommentFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  reports: ListFilterInputTypeOfReportFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input AdsFilterInput {
  and: [AdsFilterInput!]
  or: [AdsFilterInput!]
  visitType: VisitTypeOperationFilterInput
  targetLocation: StringOperationFilterInput
  targetStartAge: IntOperationFilterInput
  targetEndAge: IntOperationFilterInput
  targetGenders: NullableOfGenderOperationFilterInput
  manualStatus: ManualStatusOperationFilterInput
  numberOfPeopleCanSee: IntOperationFilterInput
  pricePerPerson: FloatOperationFilterInput
  totlaAmount: FloatOperationFilterInput
  totalViewed: IntOperationFilterInput
  ticketNumber: StringOperationFilterInput
  type: AdsTypeOperationFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  payments: ListFilterInputTypeOfPaymentFilterInput
  isCompletedPayment: BooleanOperationFilterInput
  isActive: BooleanOperationFilterInput
  latestPaymentIntentId: StringOperationFilterInput
  latestPaymentDateTime: DateTimeOperationFilterInput
  adsRejectionStatus: AdsRejectionStatusOperationFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  appealAdss: ListFilterInputTypeOfAppealAdsFilterInput
  userId: IntOperationFilterInput
  discountCode: StringOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input MessageFilterInput {
  and: [MessageFilterInput!]
  or: [MessageFilterInput!]
  messageType: MessageTypeOperationFilterInput
  contentAddress: StringOperationFilterInput
  groupId: IntOperationFilterInput
  isEdited: BooleanOperationFilterInput
  isSeen: BooleanOperationFilterInput
  isDelivered: BooleanOperationFilterInput
  seenDate: DateTimeOperationFilterInput
  isShare: BooleanOperationFilterInput
  receiverId: IntOperationFilterInput
  receiver: UserFilterInput
  profileId: IntOperationFilterInput
  profile: UserFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  story: StoryFilterInput
  storyId: IntOperationFilterInput
  parentMessage: MessageFilterInput
  parentMessageId: IntOperationFilterInput
  childrenMessages: ListFilterInputTypeOfMessageFilterInput
  notifications: ListFilterInputTypeOfNotificationFilterInput
  reports: ListFilterInputTypeOfReportFilterInput
  createdAt: DateTimeOperationFilterInput
  conversationId: IntOperationFilterInput
  conversation: ConversationFilterInput
  senderId: IntOperationFilterInput
  sender: UserFilterInput
  text: StringOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input PostLikesSortInput {
  userId: SortEnumType
  user: UserSortInput
  postId: SortEnumType
  post: PostSortInput
  liked: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input PostSortInput {
  posterId: SortEnumType
  poster: UserSortInput
  postedAt: SortEnumType
  isPromote: SortEnumType
  latestPromoteDate: SortEnumType
  isCompletedPayment: SortEnumType
  yourMind: SortEnumType
  deletedBy: SortEnumType
  allowDownload: SortEnumType
  location: SortEnumType
  isPin: SortEnumType
  pinDate: SortEnumType
  postType: SortEnumType
  isByAdmin: SortEnumType
  hits: SortEnumType
  thisWeekHits: SortEnumType
  savePostsCount: SortEnumType
  thisWeekSavePostsCount: SortEnumType
  commentsCount: SortEnumType
  thisWeekCommentsCount: SortEnumType
  likesCount: SortEnumType
  thisWeekLikesCount: SortEnumType
  notInterestedPostsCount: SortEnumType
  thisWeekNotInterestedPostsCount: SortEnumType
  shareCount: SortEnumType
  thisWeekShareCount: SortEnumType
  latestUpdateThisWeeks: SortEnumType
  isEdited: SortEnumType
  isCreatedInGroup: SortEnumType
  postItemsString: SortEnumType
  stringTags: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input ArticleSortInput {
  isPromote: SortEnumType
  latestPromoteDate: SortEnumType
  isCompletedPayment: SortEnumType
  author: SortEnumType
  title: SortEnumType
  subTitle: SortEnumType
  isCreatedInGroup: SortEnumType
  articleType: SortEnumType
  deletedBy: SortEnumType
  isPin: SortEnumType
  pinDate: SortEnumType
  isVerifield: SortEnumType
  isByAdmin: SortEnumType
  hits: SortEnumType
  thisWeekHits: SortEnumType
  saveArticlesCount: SortEnumType
  thisWeekSaveArticlesCount: SortEnumType
  articleCommentsCount: SortEnumType
  thisWeekArticleCommentsCount: SortEnumType
  articleLikesCount: SortEnumType
  thisWeekArticleLikesCount: SortEnumType
  notInterestedArticlesCount: SortEnumType
  thisWeekNotInterestedArticlesCount: SortEnumType
  shareCount: SortEnumType
  thisWeekShareCount: SortEnumType
  latestUpdateThisWeeks: SortEnumType
  isEdited: SortEnumType
  articleItemsString: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input CommentSortInput {
  postId: SortEnumType
  post: PostSortInput
  deletedBy: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  mentionId: SortEnumType
  mention: UserSortInput
  createdAt: SortEnumType
  parentId: SortEnumType
  parent: CommentSortInput
  text: SortEnumType
  commentType: SortEnumType
  contentAddress: SortEnumType
  isEdited: SortEnumType
  likeCount: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input ArticleCommentSortInput {
  text: SortEnumType
  commentType: SortEnumType
  contentAddress: SortEnumType
  isEdited: SortEnumType
  deletedBy: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  parentId: SortEnumType
  parent: ArticleCommentSortInput
  mentionId: SortEnumType
  mention: UserSortInput
  likeCount: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input AdsSortInput {
  visitType: SortEnumType
  targetLocation: SortEnumType
  targetStartAge: SortEnumType
  targetEndAge: SortEnumType
  targetGenders: SortEnumType
  manualStatus: SortEnumType
  numberOfPeopleCanSee: SortEnumType
  pricePerPerson: SortEnumType
  totlaAmount: SortEnumType
  totalViewed: SortEnumType
  ticketNumber: SortEnumType
  type: SortEnumType
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  isCompletedPayment: SortEnumType
  isActive: SortEnumType
  latestPaymentIntentId: SortEnumType
  latestPaymentDateTime: SortEnumType
  adsRejectionStatus: SortEnumType
  userId: SortEnumType
  discountCode: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input MessageSortInput {
  messageType: SortEnumType
  contentAddress: SortEnumType
  groupId: SortEnumType
  isEdited: SortEnumType
  isSeen: SortEnumType
  isDelivered: SortEnumType
  seenDate: SortEnumType
  isShare: SortEnumType
  receiverId: SortEnumType
  receiver: UserSortInput
  profileId: SortEnumType
  profile: UserSortInput
  post: PostSortInput
  postId: SortEnumType
  article: ArticleSortInput
  articleId: SortEnumType
  story: StorySortInput
  storyId: SortEnumType
  parentMessage: MessageSortInput
  parentMessageId: SortEnumType
  createdAt: SortEnumType
  conversationId: SortEnumType
  conversation: ConversationSortInput
  senderId: SortEnumType
  sender: UserSortInput
  text: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input AdsDtoStatusOperationFilterInput {
  eq: AdsDtoStatus
  neq: AdsDtoStatus
  in: [AdsDtoStatus!]
  nin: [AdsDtoStatus!]
}

input ListFilterInputTypeOfAppealAdsFilterInput {
  all: AppealAdsFilterInput
  none: AppealAdsFilterInput
  some: AppealAdsFilterInput
  any: Boolean
}

type AdsDto {
  ads: Ads
  adsDtoStatus: AdsDtoStatus!
  isViewed: Boolean!
  isSaved: Boolean!
  isNotInterested: Boolean!
  isLiked: Boolean!
  isYours: Boolean!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
  likeCount: Int!
  postItemsString: String
  isAppeal: Boolean!
  appealAds: [AppealAds]
}

type ArticleCommentDto {
  articleComment: ArticleComment
  isLiked: Boolean!
  likeCount: Int!
  hasChild: Boolean!
  childrenCount: Int!
}

input ListFilterInputTypeOfNotificationFilterInput {
  all: NotificationFilterInput
  none: NotificationFilterInput
  some: NotificationFilterInput
  any: Boolean
}

type ArticleLike {
  article: Article
  articleId: Int!
  liked: Boolean!
  notifications: [Notification]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input ListFilterInputTypeOfArticleCommentDtoFilterInput {
  all: ArticleCommentDtoFilterInput
  none: ArticleCommentDtoFilterInput
  some: ArticleCommentDtoFilterInput
  any: Boolean
}

type ArticleDto {
  article: Article
  isViewed: Boolean!
  isSaved: Boolean!
  isNotInterested: Boolean!
  isLiked: Boolean!
  isYourArticle: Boolean!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
  likeCount: Int!
  notInterestedArticlesCount: Int!
  articleItemsString: String
  articleComments: [ArticleCommentDto]
}

type ArticleLikeDto {
  id: Int!
  createdDate: DateTime!
  userId: Int!
  user: User
  article: Article
  articleId: Int!
  isViewed: Boolean!
  isSaved: Boolean!
  isNotInterested: Boolean!
  isLiked: Boolean!
  isYourArticle: Boolean!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
  likeCount: Int!
  articleItemsString: String
}

type UserViewArticle {
  article: Article
  articleId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type SaveArticleDto {
  article: Article
  articleId: Int!
  userId: Int!
  user: User
  isViewed: Boolean!
  isSaved: Boolean!
  isNotInterested: Boolean!
  isLiked: Boolean!
  isYourArticle: Boolean!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
  likeCount: Int!
}

type BlockUser {
  blockerId: Int!
  blocker: User
  blockedId: Int!
  blocked: User
  isMutual: Boolean!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type CommentDto {
  comment: Comment
  isLiked: Boolean!
  likeCount: Int!
  hasChild: Boolean!
  childrenCount: Int!
}

type EventModel {
  timeStamp: DateTime!
  version: Int!
  eventType: String
  eventData: String
  admin: User
  adminId: Int
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input ListFilterInputTypeOfUserDiscountFilterInput {
  all: UserDiscountFilterInput
  none: UserDiscountFilterInput
  some: UserDiscountFilterInput
  any: Boolean
}

type Discount {
  discountCode: String
  percent: Int!
  amount: Float!
  expireDate: DateTime!
  userDiscounts: [UserDiscount]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input FolloweAcceptStatusOperationFilterInput {
  eq: FolloweAcceptStatus
  neq: FolloweAcceptStatus
  in: [FolloweAcceptStatus!]
  nin: [FolloweAcceptStatus!]
}

type UserFollower {
  followerId: Int!
  follower: User
  followedId: Int!
  followed: User
  isMutual: Boolean!
  followedAt: DateTime!
  followeAcceptStatus: FolloweAcceptStatus!
  notifications: [Notification]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type HideStoryDto {
  follower: User
  isHided: Boolean!
}

input ListFilterInputTypeOfStoryFilterInput {
  all: StoryFilterInput
  none: StoryFilterInput
  some: StoryFilterInput
  any: Boolean
}

type HighLight {
  title: String
  cover: String
  stories: [Story]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type LikeArticleComment {
  articleComment: ArticleComment
  articleCommentId: Int!
  notifications: [Notification]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type LikeComment {
  comment: Comment
  commentId: Int!
  notifications: [Notification]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input LinkTypeOperationFilterInput {
  eq: LinkType
  neq: LinkType
  in: [LinkType!]
  nin: [LinkType!]
}

type Link {
  post: Post
  postId: Int
  article: Article
  articleId: Int
  linkType: LinkType!
  entityId: Int
  text: String
  url: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input ConversationFilterInput {
  and: [ConversationFilterInput!]
  or: [ConversationFilterInput!]
  firstUserId: IntOperationFilterInput
  secondUserId: IntOperationFilterInput
  isFirstUserDeleted: BooleanOperationFilterInput
  firstUserDeletedDate: DateTimeOperationFilterInput
  isSecondUserDeleted: BooleanOperationFilterInput
  secondUserDeletedDate: DateTimeOperationFilterInput
  latestMessageUserId: IntOperationFilterInput
  admin: UserFilterInput
  adminId: IntOperationFilterInput
  isGroup: BooleanOperationFilterInput
  groupName: StringOperationFilterInput
  groupDescription: StringOperationFilterInput
  groupLink: StringOperationFilterInput
  groupImgageUrl: StringOperationFilterInput
  isPrivate: BooleanOperationFilterInput
  latestMessageDate: DateTimeOperationFilterInput
  userGroups: ListFilterInputTypeOfUserMessageGroupFilterInput
  userSearchGroups: ListFilterInputTypeOfUserSearchGroupFilterInput
  firstUser: UserFilterInput
  secondUser: UserFilterInput
  firstUnreadCount: IntOperationFilterInput
  secondUnreadCount: IntOperationFilterInput
  messages: ListFilterInputTypeOfMessageFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input MessageTypeOperationFilterInput {
  eq: MessageType
  neq: MessageType
  in: [MessageType!]
  nin: [MessageType!]
}

input ConversationSortInput {
  firstUserId: SortEnumType
  secondUserId: SortEnumType
  isFirstUserDeleted: SortEnumType
  firstUserDeletedDate: SortEnumType
  isSecondUserDeleted: SortEnumType
  secondUserDeletedDate: SortEnumType
  latestMessageUserId: SortEnumType
  admin: UserSortInput
  adminId: SortEnumType
  isGroup: SortEnumType
  groupName: SortEnumType
  groupDescription: SortEnumType
  groupLink: SortEnumType
  groupImgageUrl: SortEnumType
  isPrivate: SortEnumType
  latestMessageDate: SortEnumType
  firstUser: UserSortInput
  secondUser: UserSortInput
  firstUnreadCount: SortEnumType
  secondUnreadCount: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

type MessageDto {
  createdAt: DateTime!
  conversationId: Int!
  conversation: Conversation
  senderId: Int!
  sender: User
  text: String
  isSenderDeleted: Boolean!
  isReceiverDeleted: Boolean!
  messageType: MessageType!
  contentAddress: String
  groupId: Int
  isEdited: Boolean!
  isSeen: Boolean!
  seenDate: DateTime
  receiverId: Int
  receiver: User
  profileId: Int
  profile: User
  post: Post
  postId: Int
  article: Article
  articleId: Int
  story: Story
  storyId: Int
  parentMessage: Message
  parentMessageId: Int
  isDelivered: Boolean!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type DiscussionsDto {
  id: Int!
  conversationId: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
  messageType: MessageType!
  post: Post
  article: Article
  isViewed: Boolean!
  isSaved: Boolean!
  isNotInterested: Boolean!
  isLiked: Boolean!
  isYours: Boolean!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
  likeCount: Int!
  itemsString: String
}

input NullableOfUserTypesOperationFilterInput {
  eq: UserTypes
  neq: UserTypes
  in: [UserTypes]
  nin: [UserTypes]
}

type ConversationDto {
  conversationId: Int!
  user: User
  unreadCount: Int!
  latestMessageDate: DateTime
  isGroup: Boolean!
  admin: User
  adminId: Int
  groupDescription: String
  groupLink: String
  isPrivate: Boolean!
  groupName: String
  groupImgageUrl: String
  lastMessage: Message
  isFirstUserDeleted: Boolean!
  firstUserDeletedDate: DateTime!
  isSecondUserDeleted: Boolean!
  secondUserDeletedDate: DateTime!
  latestMessageUserId: Int!
  userId: Int
  email: String
  displayName: String
  username: String
  lastSeen: DateTime
  imageAddress: String
  cover: String
  userTypes: UserTypes
  dateOfBirth: DateTime
  bio: String
  groupMemberCount: Int!
  isMemberOfGroup: Boolean!
}

type UserMessageGroup {
  isAdmin: Boolean!
  userId: Int!
  user: User
  conversationId: Int!
  conversation: Conversation
  unreadCount: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type FollowUserForGroupDto {
  user: User
  isMemberOfGroup: Boolean!
}

type NotificationDto {
  notification: Notification
  iFollowUser: UserFollower
}

type NotInterestedPost {
  post: Post
  postId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input PaymentConfirmationStatusOperationFilterInput {
  eq: PaymentConfirmationStatus
  neq: PaymentConfirmationStatus
  in: [PaymentConfirmationStatus!]
  nin: [PaymentConfirmationStatus!]
}

input PaymentStatusOperationFilterInput {
  eq: PaymentStatus
  neq: PaymentStatus
  in: [PaymentStatus!]
  nin: [PaymentStatus!]
}

input UsersSubscriptionFilterInput {
  and: [UsersSubscriptionFilterInput!]
  or: [UsersSubscriptionFilterInput!]
  expirationDate: DateTimeOperationFilterInput
  status: UserSubscriptionStatusesOperationFilterInput
  subscriptionPlanId: IntOperationFilterInput
  subscriptionPlan: SubscriptionPlanFilterInput
  paymentId: IntOperationFilterInput
  payment: PaymentFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UsersSubscriptionSortInput {
  expirationDate: SortEnumType
  status: SortEnumType
  subscriptionPlanId: SortEnumType
  subscriptionPlan: SubscriptionPlanSortInput
  paymentId: SortEnumType
  payment: PaymentSortInput
  userId: SortEnumType
  user: UserSortInput
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

type Payment {
  createdAt: DateTime!
  amount: Float!
  amountWithoutDiscount: Float!
  discount: Float!
  user: User
  userId: Int
  paymentIntentId: String
  transferId: String
  paymentConfirmationStatus: PaymentConfirmationStatus!
  paymentStatus: PaymentStatus!
  isDeletedAccount: Boolean!
  deleteAccountDate: DateTime!
  ads: Ads
  adsId: Int
  usersSubscriptionId: Int
  usersSubscription: UsersSubscription
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type StripeAccountRequirementsError {
  code: String
  reason: String
  requirement: String
}

type Place {
  location: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input ListFilterInputTypeOfCommentDtoFilterInput {
  all: CommentDtoFilterInput
  none: CommentDtoFilterInput
  some: CommentDtoFilterInput
  any: Boolean
}

type PostDto {
  post: Post
  isViewed: Boolean!
  isSaved: Boolean!
  isNotInterested: Boolean!
  isLiked: Boolean!
  isYourPost: Boolean!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
  likeCount: Int!
  notInterestedPostsCount: Int!
  postItemsString: String
  isCompletedPayment: Boolean!
  postComments: [CommentDto]
}

type PostLikesDto {
  id: Int!
  userId: Int!
  createdDate: DateTime!
  user: User
  postId: Int!
  post: Post
  isViewed: Boolean!
  isSaved: Boolean!
  isNotInterested: Boolean!
  isLiked: Boolean!
  isYourPost: Boolean!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
  likeCount: Int!
  postItemsString: String
}

type UserViewPost {
  post: Post
  postId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type SavePostDto {
  post: Post
  postId: Int
  userId: Int!
  user: User
  isViewed: Boolean!
  isSaved: Boolean!
  isNotInterested: Boolean!
  isLiked: Boolean!
  isYourPost: Boolean!
  commentCount: Int!
  shareCount: Int!
  viewCount: Int!
  likeCount: Int!
}

input GenderOperationFilterInput {
  eq: Gender
  neq: Gender
  in: [Gender!]
  nin: [Gender!]
}

type PublicNotification {
  text: String
  fromAge: Int!
  toAge: Int!
  gender: Gender!
  isSendAll: Boolean!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input ReportTypeOperationFilterInput {
  eq: ReportType
  neq: ReportType
  in: [ReportType!]
  nin: [ReportType!]
}

type Report {
  text: String
  reason: String
  email: String
  reportType: ReportType!
  reporterId: Int!
  reporter: User
  post: Post
  postId: Int
  article: Article
  articleId: Int
  comment: Comment
  commentId: Int
  articleComment: ArticleComment
  articleCommentId: Int
  reported: User
  reportedId: Int
  message: Message
  messageId: Int
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input SecretConversationFilterInput {
  and: [SecretConversationFilterInput!]
  or: [SecretConversationFilterInput!]
  isFirstUserDeleted: BooleanOperationFilterInput
  firstUserDeletedDate: DateTimeOperationFilterInput
  isSecondUserDeleted: BooleanOperationFilterInput
  secondUserDeletedDate: DateTimeOperationFilterInput
  latestMessageUserId: IntOperationFilterInput
  latestMessageDate: DateTimeOperationFilterInput
  isBothUserJoinedToChat: BooleanOperationFilterInput
  firstUserId: IntOperationFilterInput
  firstUser: UserFilterInput
  firstUserPublicKey: StringOperationFilterInput
  secondUnreadCount: IntOperationFilterInput
  secondUserId: IntOperationFilterInput
  secondUser: UserFilterInput
  secondUserPublicKey: StringOperationFilterInput
  firstUnreadCount: IntOperationFilterInput
  isSelfDestruct: BooleanOperationFilterInput
  selfDestructTime: DateTimeOperationFilterInput
  secretMessages: ListFilterInputTypeOfSecretMessageFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SecretMessageFilterInput {
  and: [SecretMessageFilterInput!]
  or: [SecretMessageFilterInput!]
  secretConversationId: IntOperationFilterInput
  secretConversation: SecretConversationFilterInput
  senderId: IntOperationFilterInput
  sender: UserFilterInput
  aesEncryptedText: StringOperationFilterInput
  aesKeyEncryptedByRsaUsingSenderPublicKey: StringOperationFilterInput
  aesIvEncryptedByRsaUsingSenderPublicKey: StringOperationFilterInput
  aesKeyEncryptedByRsaUsingReceiverPublicKey: StringOperationFilterInput
  aesIvEncryptedByRsaUsingReceiverPublicKey: StringOperationFilterInput
  isSenderDeleted: BooleanOperationFilterInput
  isReceiverDeleted: BooleanOperationFilterInput
  aesEncryptedMessageType: StringOperationFilterInput
  aesEncryptedContentAddress: StringOperationFilterInput
  isSeen: BooleanOperationFilterInput
  seenDate: DateTimeOperationFilterInput
  receiverId: IntOperationFilterInput
  receiver: UserFilterInput
  aesEncryptedProfile: StringOperationFilterInput
  aesEncryptedPost: StringOperationFilterInput
  aesEncryptedArticle: StringOperationFilterInput
  aesEncryptedStory: StringOperationFilterInput
  parentSecretMessage: SecretMessageFilterInput
  parentMessageId: IntOperationFilterInput
  childrenMessages: ListFilterInputTypeOfSecretMessageFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SecretConversationSortInput {
  isFirstUserDeleted: SortEnumType
  firstUserDeletedDate: SortEnumType
  isSecondUserDeleted: SortEnumType
  secondUserDeletedDate: SortEnumType
  latestMessageUserId: SortEnumType
  latestMessageDate: SortEnumType
  isBothUserJoinedToChat: SortEnumType
  firstUserId: SortEnumType
  firstUser: UserSortInput
  firstUserPublicKey: SortEnumType
  secondUnreadCount: SortEnumType
  secondUserId: SortEnumType
  secondUser: UserSortInput
  secondUserPublicKey: SortEnumType
  firstUnreadCount: SortEnumType
  isSelfDestruct: SortEnumType
  selfDestructTime: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input SecretMessageSortInput {
  secretConversationId: SortEnumType
  secretConversation: SecretConversationSortInput
  senderId: SortEnumType
  sender: UserSortInput
  aesEncryptedText: SortEnumType
  aesKeyEncryptedByRsaUsingSenderPublicKey: SortEnumType
  aesIvEncryptedByRsaUsingSenderPublicKey: SortEnumType
  aesKeyEncryptedByRsaUsingReceiverPublicKey: SortEnumType
  aesIvEncryptedByRsaUsingReceiverPublicKey: SortEnumType
  isSenderDeleted: SortEnumType
  isReceiverDeleted: SortEnumType
  aesEncryptedMessageType: SortEnumType
  aesEncryptedContentAddress: SortEnumType
  isSeen: SortEnumType
  seenDate: SortEnumType
  receiverId: SortEnumType
  receiver: UserSortInput
  aesEncryptedProfile: SortEnumType
  aesEncryptedPost: SortEnumType
  aesEncryptedArticle: SortEnumType
  aesEncryptedStory: SortEnumType
  parentSecretMessage: SecretMessageSortInput
  parentMessageId: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

type SecretMessageDto {
  secretConversation: SecretConversation
  senderId: Int!
  sender: User
  aesEncryptedText: String
  aesKeyEncryptedByRsaUsingSenderPublicKey: String
  aesIvEncryptedByRsaUsingSenderPublicKey: String
  aesKeyEncryptedByRsaUsingReceiverPublicKey: String
  aesIvEncryptedByRsaUsingReceiverPublicKey: String
  isSenderDeleted: Boolean!
  isReceiverDeleted: Boolean!
  aesEncryptedMessageType: String
  aesEncryptedContentAddress: String
  isSeen: Boolean!
  receiverId: Int
  receiver: User
  aesEncryptedProfile: String
  aesEncryptedPost: String
  aesEncryptedArticle: String
  aesEncryptedStory: String
  parentSecretMessage: SecretMessage
  parentMessageId: Int
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type SecretConversationDto {
  conversationId: Int!
  user: User
  unreadCount: Int!
  latestMessageDate: DateTime
  lastMessage: SecretMessage
  isFirstUserDeleted: Boolean!
  firstUserDeletedDate: DateTime!
  isSecondUserDeleted: Boolean!
  secondUserDeletedDate: DateTime!
  latestMessageUserId: Int!
  email: String
  displayName: String
  username: String
  lastSeen: DateTime
  imageAddress: String
  cover: String
  userTypes: UserTypes
}

input ListFilterInputTypeOfSecurityAnswerFilterInput {
  all: SecurityAnswerFilterInput
  none: SecurityAnswerFilterInput
  some: SecurityAnswerFilterInput
  any: Boolean
}

type SecurityQuestion {
  question: String
  securityAnswers: [SecurityAnswer]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type StoryComment {
  text: String
  story: Story
  storyId: Int!
  notifications: [Notification]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type StoryUserDto {
  stories: [Story]
  hasNotSeenedStory: Boolean!
  storyOwner: User
  storyCount: Int!
  seenedStoryCount: Int!
}

input StoryTypeOperationFilterInput {
  eq: StoryType
  neq: StoryType
  in: [StoryType!]
  nin: [StoryType!]
}

input DeletedByOperationFilterInput {
  eq: DeletedBy
  neq: DeletedBy
  in: [DeletedBy!]
  nin: [DeletedBy!]
}

type StoryDto {
  id: Int!
  createdDate: DateTime!
  userId: Int!
  contentAddress: String
  storyType: StoryType!
  link: String
  text: String
  highLight: HighLight
  highLightId: Int
  post: Post
  postId: Int
  article: Article
  articleId: Int
  duration: Int
  isLiked: Boolean!
  likeCount: Int!
  storySeensCount: Int!
  commentCount: Int!
  deletedBy: DeletedBy!
}

type StoryLike {
  story: Story
  storyId: Int!
  liked: Boolean!
  notifications: [Notification]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type StorySeenDto {
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
  userId: Int!
  user: User
  story: Story
  storyId: Int!
  isLiked: Boolean!
}

type Strike {
  text: String
  post: Post
  postId: Int
  article: Article
  articleId: Int
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type StrikeDto {
  strikeCount: Int!
  text: String
  user: User
}

input SubscriptionPlanContentDtoFilterInput {
  and: [SubscriptionPlanContentDtoFilterInput!]
  or: [SubscriptionPlanContentDtoFilterInput!]
  duration: StringOperationFilterInput
  features: ListStringOperationFilterInput
}

input SubscriptionPlanContentDtoSortInput {
  duration: SortEnumType
}

type SubscriptionPlanDto {
  id: Int!
  price: Float!
  title: String
  supportbadge: Boolean!
  removeAds: Boolean!
  allowDownloadPost: Boolean!
  addedToCouncilGroup: Boolean!
  content: SubscriptionPlanContentDto
}

type Support {
  email: String
  text: String
  category: String
  user: User
  userId: Int
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input SuspendTypeOperationFilterInput {
  eq: SuspendType
  neq: SuspendType
  in: [SuspendType!]
  nin: [SuspendType!]
}

type Suspend {
  dayCount: Int!
  suspensionLiftingDate: DateTime!
  suspendType: SuspendType!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tag
}

input UserTypesOperationFilterInput {
  eq: UserTypes
  neq: UserTypes
  in: [UserTypes!]
  nin: [UserTypes!]
}

input ListFilterInputTypeOfSaveArticleFilterInput {
  all: SaveArticleFilterInput
  none: SaveArticleFilterInput
  some: SaveArticleFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCommentFilterInput {
  all: CommentFilterInput
  none: CommentFilterInput
  some: CommentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSavePostFilterInput {
  all: SavePostFilterInput
  none: SavePostFilterInput
  some: SavePostFilterInput
  any: Boolean
}

input ListFilterInputTypeOfNotInterestedPostFilterInput {
  all: NotInterestedPostFilterInput
  none: NotInterestedPostFilterInput
  some: NotInterestedPostFilterInput
  any: Boolean
}

input ListFilterInputTypeOfInterestedUserFilterInput {
  all: InterestedUserFilterInput
  none: InterestedUserFilterInput
  some: InterestedUserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEventModelFilterInput {
  all: EventModelFilterInput
  none: EventModelFilterInput
  some: EventModelFilterInput
  any: Boolean
}

input ListIntOperationFilterInput {
  all: IntOperationFilterInput
  none: IntOperationFilterInput
  some: IntOperationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArticleCommentFilterInput {
  all: ArticleCommentFilterInput
  none: ArticleCommentFilterInput
  some: ArticleCommentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBlockUserFilterInput {
  all: BlockUserFilterInput
  none: BlockUserFilterInput
  some: BlockUserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserSearchArticleFilterInput {
  all: UserSearchArticleFilterInput
  none: UserSearchArticleFilterInput
  some: UserSearchArticleFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserViewArticleFilterInput {
  all: UserViewArticleFilterInput
  none: UserViewArticleFilterInput
  some: UserViewArticleFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFollowerFilterInput {
  all: UserFollowerFilterInput
  none: UserFollowerFilterInput
  some: UserFollowerFilterInput
  any: Boolean
}

input ListFilterInputTypeOfResetPasswordRequestFilterInput {
  all: ResetPasswordRequestFilterInput
  none: ResetPasswordRequestFilterInput
  some: ResetPasswordRequestFilterInput
  any: Boolean
}

type User {
  isDeletedAccount: Boolean!
  deleteAccountDate: DateTime!
  linkBio: String
  stripeAccountId: String
  stripeCustomerId: String
  subscriptionId: String
  isActive: Boolean!
  isSuspended: Boolean!
  suspensionLiftingDate: DateTime
  userTypes: UserTypes!
  bio: String
  displayName: String
  legalName: String
  username: String
  dateOfBirth: DateTime!
  phoneNumber: String
  countryCode: String
  phoneNumberConfirmed: Boolean!
  isVerified: Boolean!
  imageAddress: String
  cover: String
  gender: Gender!
  location: String
  ip: String
  directNotification: Boolean!
  followeBacknotification: Boolean!
  likeNotification: Boolean!
  commentNotification: Boolean!
  privateAccount: Boolean!
  professionalAccount: Boolean!
  lastSeen: DateTime!
  saveArticles: [SaveArticle]
  userDiscounts: [UserDiscount]
  commentPosts: [Comment]
  savePosts: [SavePost]
  notInterestedPosts: [NotInterestedPost]
  interestedUsers: [InterestedUser]
  eventModels: [EventModel]
  appealAdss: [AppealAds]
  notInterestedPostIds: [Int!]
  commentMentions: [Comment]
  articleCommentMentions: [ArticleComment]
  blockers: [BlockUser]
  blocks: [BlockUser]
  userSearchArticles: [UserSearchArticle]
  notInterestedArticleIds: [Int!]
  userViewArticles: [UserViewArticle]
  followers: [UserFollower]
  followees: [UserFollower]
  resetPasswordRequests: [ResetPasswordRequest]
  externalId: String
  email: String
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserSusciopiousDto {
  id: Int!
  userId: Int!
  displayName: String
  userAgent: String
  sigInIp: String
  sigInTime: DateTime!
  signOutIp: String
  sigOutTime: DateTime
  isSuspicious: Boolean!
  imageAddress: String
  cover: String
  userName: String
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input ResetPasswordRequestStatusOperationFilterInput {
  eq: ResetPasswordRequestStatus
  neq: ResetPasswordRequestStatus
  in: [ResetPasswordRequestStatus!]
  nin: [ResetPasswordRequestStatus!]
}

type ResetPasswordRequest {
  governmentIssuePhotoId: String
  otherFiles: [String]
  username: String
  legalName: String
  displayName: String
  dateOfBirth: DateTime!
  gender: Gender!
  contactEmailOrUsername: String
  proofOfAddress: String
  status: ResetPasswordRequestStatus!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserSearchAccount {
  searcherId: Int!
  searcher: User
  searchedId: Int!
  searched: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserSearchArticle {
  article: Article
  articleId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserSearchGroupDto {
  conversation: Conversation
  conversationId: Int!
  userId: Int!
  user: User
  memberCount: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserSearchPlace {
  place: String
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserSearchTag {
  tag: String
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserVisitLink {
  post: Post
  postId: Int
  article: Article
  articleId: Int
  linkType: LinkType!
  text: String
  link: String
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input VerificationRequestAcceptStatusOperationFilterInput {
  eq: VerificationRequestAcceptStatus
  neq: VerificationRequestAcceptStatus
  in: [VerificationRequestAcceptStatus!]
  nin: [VerificationRequestAcceptStatus!]
}

type VerificationRequest {
  verificationRequestAcceptStatus: VerificationRequestAcceptStatus!
  proofOfAddress: String
  governmentIssuePhotoId: String
  otheFiles: [String]
  reasonReject: String
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type WarningBanner {
  description: String
  post: Post
  postId: Int
  article: Article
  articleId: Int
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input UserViewTagFilterInput {
  and: [UserViewTagFilterInput!]
  or: [UserViewTagFilterInput!]
  tag: TagFilterInput
  tagId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ListFilterInputTypeOfStoryCommentFilterInput {
  all: StoryCommentFilterInput
  none: StoryCommentFilterInput
  some: StoryCommentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStoryLikeFilterInput {
  all: StoryLikeFilterInput
  none: StoryLikeFilterInput
  some: StoryLikeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStorySeenFilterInput {
  all: StorySeenFilterInput
  none: StorySeenFilterInput
  some: StorySeenFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMessageFilterInput {
  all: MessageFilterInput
  none: MessageFilterInput
  some: MessageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPostLikesFilterInput {
  all: PostLikesFilterInput
  none: PostLikesFilterInput
  some: PostLikesFilterInput
  any: Boolean
}

input PostTypeOperationFilterInput {
  eq: PostType
  neq: PostType
  in: [PostType!]
  nin: [PostType!]
}

input ListFilterInputTypeOfWarningBannerFilterInput {
  all: WarningBannerFilterInput
  none: WarningBannerFilterInput
  some: WarningBannerFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserViewPostFilterInput {
  all: UserViewPostFilterInput
  none: UserViewPostFilterInput
  some: UserViewPostFilterInput
  any: Boolean
}

input ListFilterInputTypeOfAdsFilterInput {
  all: AdsFilterInput
  none: AdsFilterInput
  some: AdsFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserSearchPostFilterInput {
  all: UserSearchPostFilterInput
  none: UserSearchPostFilterInput
  some: UserSearchPostFilterInput
  any: Boolean
}

input ListFilterInputTypeOfReportFilterInput {
  all: ReportFilterInput
  none: ReportFilterInput
  some: ReportFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserVisitLinkFilterInput {
  all: UserVisitLinkFilterInput
  none: UserVisitLinkFilterInput
  some: UserVisitLinkFilterInput
  any: Boolean
}

input ListFilterInputTypeOfLinkFilterInput {
  all: LinkFilterInput
  none: LinkFilterInput
  some: LinkFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStrikeFilterInput {
  all: StrikeFilterInput
  none: StrikeFilterInput
  some: StrikeFilterInput
  any: Boolean
}

input ArticleTypeOperationFilterInput {
  eq: ArticleType
  neq: ArticleType
  in: [ArticleType!]
  nin: [ArticleType!]
}

input ListFilterInputTypeOfArticleItemFilterInput {
  all: ArticleItemFilterInput
  none: ArticleItemFilterInput
  some: ArticleItemFilterInput
  any: Boolean
}

input ListFilterInputTypeOfArticleLikeFilterInput {
  all: ArticleLikeFilterInput
  none: ArticleLikeFilterInput
  some: ArticleLikeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfNotInterestedArticleFilterInput {
  all: NotInterestedArticleFilterInput
  none: NotInterestedArticleFilterInput
  some: NotInterestedArticleFilterInput
  any: Boolean
}

input CommentTypeOperationFilterInput {
  eq: CommentType
  neq: CommentType
  in: [CommentType!]
  nin: [CommentType!]
}

input ListFilterInputTypeOfLikeCommentFilterInput {
  all: LikeCommentFilterInput
  none: LikeCommentFilterInput
  some: LikeCommentFilterInput
  any: Boolean
}

input ListFilterInputTypeOfLikeArticleCommentFilterInput {
  all: LikeArticleCommentFilterInput
  none: LikeArticleCommentFilterInput
  some: LikeArticleCommentFilterInput
  any: Boolean
}

input VisitTypeOperationFilterInput {
  eq: VisitType
  neq: VisitType
  in: [VisitType!]
  nin: [VisitType!]
}

input NullableOfGenderOperationFilterInput {
  eq: Gender
  neq: Gender
  in: [Gender]
  nin: [Gender]
}

input ManualStatusOperationFilterInput {
  eq: ManualStatus
  neq: ManualStatus
  in: [ManualStatus!]
  nin: [ManualStatus!]
}

input AdsTypeOperationFilterInput {
  eq: AdsType
  neq: AdsType
  in: [AdsType!]
  nin: [AdsType!]
}

input ListFilterInputTypeOfPaymentFilterInput {
  all: PaymentFilterInput
  none: PaymentFilterInput
  some: PaymentFilterInput
  any: Boolean
}

input AdsRejectionStatusOperationFilterInput {
  eq: AdsRejectionStatus
  neq: AdsRejectionStatus
  in: [AdsRejectionStatus!]
  nin: [AdsRejectionStatus!]
}

input AppealAdsFilterInput {
  and: [AppealAdsFilterInput!]
  or: [AppealAdsFilterInput!]
  ads: AdsFilterInput
  adsId: IntOperationFilterInput
  description: StringOperationFilterInput
  reasonReject: StringOperationFilterInput
  appealStatus: AppealStatusOperationFilterInput
  adminId: IntOperationFilterInput
  admin: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserDiscountFilterInput {
  and: [UserDiscountFilterInput!]
  or: [UserDiscountFilterInput!]
  userId: IntOperationFilterInput
  user: UserFilterInput
  discountId: IntOperationFilterInput
  discount: DiscountFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ListFilterInputTypeOfUserMessageGroupFilterInput {
  all: UserMessageGroupFilterInput
  none: UserMessageGroupFilterInput
  some: UserMessageGroupFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserSearchGroupFilterInput {
  all: UserSearchGroupFilterInput
  none: UserSearchGroupFilterInput
  some: UserSearchGroupFilterInput
  any: Boolean
}

input UserSubscriptionStatusesOperationFilterInput {
  eq: UserSubscriptionStatuses
  neq: UserSubscriptionStatuses
  in: [UserSubscriptionStatuses!]
  nin: [UserSubscriptionStatuses!]
}

input SubscriptionPlanFilterInput {
  and: [SubscriptionPlanFilterInput!]
  or: [SubscriptionPlanFilterInput!]
  priceId: StringOperationFilterInput
  price: FloatOperationFilterInput
  isActive: BooleanOperationFilterInput
  title: StringOperationFilterInput
  content: StringOperationFilterInput
  durationDays: IntOperationFilterInput
  supportbadge: BooleanOperationFilterInput
  removeAds: BooleanOperationFilterInput
  allowDownloadPost: BooleanOperationFilterInput
  addedToCouncilGroup: BooleanOperationFilterInput
  usersSubscriptions: ListFilterInputTypeOfUsersSubscriptionFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SubscriptionPlanSortInput {
  priceId: SortEnumType
  price: SortEnumType
  isActive: SortEnumType
  title: SortEnumType
  content: SortEnumType
  durationDays: SortEnumType
  supportbadge: SortEnumType
  removeAds: SortEnumType
  allowDownloadPost: SortEnumType
  addedToCouncilGroup: SortEnumType
  id: SortEnumType
  isDeleted: SortEnumType
  createdDate: SortEnumType
  lastModifiedDate: SortEnumType
}

input ListFilterInputTypeOfSecretMessageFilterInput {
  all: SecretMessageFilterInput
  none: SecretMessageFilterInput
  some: SecretMessageFilterInput
  any: Boolean
}

input SaveArticleFilterInput {
  and: [SaveArticleFilterInput!]
  or: [SaveArticleFilterInput!]
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input SavePostFilterInput {
  and: [SavePostFilterInput!]
  or: [SavePostFilterInput!]
  post: PostFilterInput
  postId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input InterestedUserFilterInput {
  and: [InterestedUserFilterInput!]
  or: [InterestedUserFilterInput!]
  followerUser: UserFilterInput
  followersUserId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  interestedUserType: InterestedUserTypeOperationFilterInput
  post: PostFilterInput
  postId: IntOperationFilterInput
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input UserSearchPostFilterInput {
  and: [UserSearchPostFilterInput!]
  or: [UserSearchPostFilterInput!]
  post: PostFilterInput
  postId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ArticleItemFilterInput {
  and: [ArticleItemFilterInput!]
  or: [ArticleItemFilterInput!]
  data: StringOperationFilterInput
  order: IntOperationFilterInput
  videoTime: StringOperationFilterInput
  videoShape: StringOperationFilterInput
  articleItemType: ArticleItemTypeOperationFilterInput
}

input NotInterestedArticleFilterInput {
  and: [NotInterestedArticleFilterInput!]
  or: [NotInterestedArticleFilterInput!]
  article: ArticleFilterInput
  articleId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input AppealStatusOperationFilterInput {
  eq: AppealStatus
  neq: AppealStatus
  in: [AppealStatus!]
  nin: [AppealStatus!]
}

input UserSearchGroupFilterInput {
  and: [UserSearchGroupFilterInput!]
  or: [UserSearchGroupFilterInput!]
  conversation: ConversationFilterInput
  conversationId: IntOperationFilterInput
  userId: IntOperationFilterInput
  user: UserFilterInput
  id: IntOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  lastModifiedDate: DateTimeOperationFilterInput
}

input ListFilterInputTypeOfUsersSubscriptionFilterInput {
  all: UsersSubscriptionFilterInput
  none: UsersSubscriptionFilterInput
  some: UsersSubscriptionFilterInput
  any: Boolean
}

input InterestedUserTypeOperationFilterInput {
  eq: InterestedUserType
  neq: InterestedUserType
  in: [InterestedUserType!]
  nin: [InterestedUserType!]
}

input ArticleItemTypeOperationFilterInput {
  eq: ArticleItemType
  neq: ArticleItemType
  in: [ArticleItemType!]
  nin: [ArticleItemType!]
}

enum NotificationType {
  FOLLOW
  POST_LIKE
  NEW_REPLY_COMMENT
  NEW_COMMENT
  LIKE_COMMENT
  ARTICLE_COMMENT
  NEW_REPLY_TO_ARTICLE_COMMENT
  LIKE_ARTICLE_COMMENT
  ARTICLE_LIKE
  STORY_LIKE
  NEW_COMMENT_TO_STORY
  MESSAGE
  SECRET_MESSAGE
  UN_FOLLOW
  MENTION_IN_ARTICLE_COMMENT
  MENTION_IN_POST_COMMENT
  MENTION_IN_POST
  NOTIFICAITON_BY_ADMIN
  STRIKE_POST
  STRIKE_ARTICLE
  SUPSEND
  REJECT_ADS
}

enum MessageType {
  PROFILE
  POST
  STORY
  ARTICLE
  TEXT
  PHOTO
  VIDEO
  VOICE
  FILE
  LINK
  REPLAY_STORY
}

enum GraphqlSubscriptionType {
  MESSAGE
  NOTIFICATION
}

type UsersSubscriptionsFeaturesDto {
  subscriptionPlanId: Int!
  expirationDate: DateTime!
  supportbadge: Boolean!
  removeAds: Boolean!
  allowDownloadPost: Boolean!
  addedToCouncilGroup: Boolean!
}

enum FolloweAcceptStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type AdminInfoDto {
  displayName: String
  username: String
  email: String
}

type CurrentUserDto {
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
  externalId: String
  linkBio: String
  email: String
  stripeAccountId: String
  stripeCustomerId: String
  isActive: Boolean!
  isDeletedAccount: Boolean!
  userTypes: UserTypes!
  bio: String
  displayName: String
  username: String
  dateOfBirth: DateTime!
  phoneNumber: String
  countryCode: String
  phoneNumberConfirmed: Boolean!
  isVerified: Boolean!
  imageAddress: String
  cover: String
  gender: Gender!
  location: String
  directNotification: Boolean!
  followeBacknotification: Boolean!
  likeNotification: Boolean!
  commentNotification: Boolean!
  enableTwoFactorAuthentication: Boolean!
  privateAccount: Boolean!
  professionalAccount: Boolean!
}

type SingleUserDto {
  contentCount: Int!
  followerCount: Int!
  follwingCount: Int!
}

type SettingsDto {
  initialPrice: Float!
  numberOfPeoplePerUnit: Float!
}

type SubscriptionPlanContentDto {
  duration: String
  features: [String]
}

enum SuspendType {
  REQULAR
  AFTER3_STRIKE
}

type ViewPriceDto {
  initialPrice: Int!
  numberOfPeoplePerUnit: Int!
}

type SaveArticle {
  article: Article
  articleId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type SavePost {
  post: Post
  postId: Int
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type FollowInfoDto {
  isMyFollower: Boolean!
  isMyFollowing: Boolean!
  follower: UserFollower
  following: UserFollower
}

type DashboardInfo {
  publicAccountPercent: Float!
  privateAccountPercent: Float!
  womanAccountPercent: Float!
  manAccountPercent: Float!
  accountWith0To15AgePercent: Float!
  accountWith15To20AgePercent: Float!
  accountWith20To25AgePercent: Float!
  accountWith25To30AgePercent: Float!
  accountWith30To35AgePercent: Float!
  accountWith35To40AgePercent: Float!
  accountWith40To120AgePercent: Float!
  ratherNotSayAccountPercent: Float!
  customAccountPercent: Float!
}

type GetDashboardInfoDto {
  numberOfPosts: Int!
  numberOfPostsRatePercent: Float!
  numberOfPostComments: Int!
  numberOfPostCommentsRatePercent: Float!
  numberOfPostLikes: Int!
  numberOfPostLikesRatePercent: Float!
  numberOfPostPromotions: Int!
  numberOfPostPromotionsRatePercent: Float!
  numberOfArticles: Int!
  numberOfArticlesRatePercent: Float!
  numberOfArticleComments: Int!
  numberOfArticleCommentsRatePercent: Float!
  numberOfArticleLikes: Int!
  numberOfArticleLikesRatePercent: Float!
  numberOfArticlePromotions: Int!
  numberOfTags: Int!
  numberOfTagsRatePercent: Float!
  publicAccountPercent: Float!
  privateAccountPercent: Float!
  womanAccountPercent: Float!
  manAccountPercent: Float!
  ratherNotSayAccountPercent: Float!
  customAccountPercent: Float!
  accountWith0To15AgePercent: Float!
  accountWith15To20AgePercent: Float!
  accountWith20To25AgePercent: Float!
  accountWith25To30AgePercent: Float!
  accountWith30To35AgePercent: Float!
  accountWith35To40AgePercent: Float!
  accountWith40To120AgePercent: Float!
  top5Tag: Top5Tags
  top5TagUsesCounts: [TopTagUsesCount]
  top5TagLikesCounts: [TopTagLikesCount]
  totalViewsInSystem: Settings
}

enum AdsType {
  PROMOTE_POST
  PROMOTE_ARTILCE
  ADS
}

enum AppealStatus {
  PENDING
  REJECTED
  ACCEPTED
}

enum ArticleItemType {
  TEXT
  IMAGE
  VIDEO
  GIF
  CITATIONS
}

type UserViewTag {
  tag: Tag
  tagId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

enum VerificationRequestAcceptStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum AdsDtoStatus {
  ACTIVE
  COMPLETE
  REJECTED
  SUSPENDED
}

enum LinkType {
  POST
  ARTICLE
  PROFILE
  MESSAGE_GROUP
}

type UserDiscount {
  userId: Int!
  user: User
  discountId: Int!
  discount: Discount
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserSearchPost {
  post: Post
  postId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type UserSearchGroup {
  conversation: Conversation
  conversationId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

enum PaymentConfirmationStatus {
  PENDDING_CONFIRMATION
  SUCCESSFUL
  FAILED
}

enum PaymentStatus {
  PAY_FOR_PROMOTE_POST
  PAY_FOR_POST_ADS
  PAY_FOR_PROMOTE_ARTICLE
  PAY_FOR_SUBSCRIPTION
}

enum ResetPasswordRequestStatus {
  NOT_MATCH
  MATCH
  NOT_CHECKED
}

type Ads {
  visitType: VisitType!
  targetLocation: String
  targetStartAge: Int
  targetEndAge: Int
  targetGenders: Gender
  manualStatus: ManualStatus!
  numberOfPeopleCanSee: Int!
  pricePerPerson: Float
  totlaAmount: Float
  totalViewed: Int!
  ticketNumber: String
  type: AdsType!
  post: Post
  postId: Int
  article: Article
  articleId: Int
  payments: [Payment]
  isCompletedPayment: Boolean!
  isActive: Boolean!
  latestPaymentIntentId: String
  latestPaymentDateTime: DateTime!
  adsRejectionStatus: AdsRejectionStatus!
  notifications: [Notification]
  appealAdss: [AppealAds]
  userId: Int
  discountCode: String
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type AppealAds {
  ads: Ads
  adsId: Int!
  description: String
  reasonReject: String
  appealStatus: AppealStatus!
  adminId: Int!
  admin: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type ArticleComment {
  text: String
  commentType: CommentType!
  contentAddress: String
  isEdited: Boolean!
  deletedBy: DeletedBy!
  article: Article
  articleId: Int!
  parentId: Int
  parent: ArticleComment
  mentionId: Int
  mention: User
  likeCount: Int!
  children: [ArticleComment]
  likeArticleComments: [LikeArticleComment]
  notifications: [Notification]
  reports: [Report]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type Article {
  isPromote: Boolean!
  latestPromoteDate: DateTime
  isCompletedPayment: Boolean!
  author: String
  title: String
  subTitle: String
  isCreatedInGroup: Boolean!
  articleType: ArticleType!
  deletedBy: DeletedBy!
  isPin: Boolean!
  pinDate: DateTime!
  isVerifield: Boolean!
  isByAdmin: Boolean!
  hits: Int!
  thisWeekHits: Int!
  saveArticlesCount: Int!
  thisWeekSaveArticlesCount: Int!
  articleCommentsCount: Int!
  thisWeekArticleCommentsCount: Int!
  articleLikesCount: Int!
  thisWeekArticleLikesCount: Int!
  notInterestedArticlesCount: Int!
  thisWeekNotInterestedArticlesCount: Int!
  shareCount: Int!
  thisWeekShareCount: Int!
  latestUpdateThisWeeks: DateTime!
  isEdited: Boolean!
  articleItems: [ArticleItem]
  articleItemsString: String
  adses: [Ads]
  stories: [Story]
  saveArticles: [SaveArticle]
  articleLikes: [ArticleLike]
  articleComments: [ArticleComment]
  userSearchArticles: [UserSearchArticle]
  messages: [Message]
  notInterestedArticles: [NotInterestedArticle]
  userViewArticles: [UserViewArticle]
  interestedUsers: [InterestedUser]
  reports: [Report]
  userVisitLinks: [UserVisitLink]
  links: [Link]
  strikes: [Strike]
  notifications: [Notification]
  warningBanners: [WarningBanner]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input ArticleItemInput {
  data: String!
  order: Int!
  videoTime: String
  videoShape: String
  articleItemType: ArticleItemType!
  id: Int
}

type ArticleAdsDto {
  article: Article
  clientSecret: String
}

enum InterestedUserType {
  POST
  ARTICLE
}

enum UserSubscriptionStatuses {
  ACTIVE
  PAUSED
  CANCELED
}

enum AdsRejectionStatus {
  ACTIVE
  REJECTED
  SUSPENDED
}

type Comment {
  postId: Int!
  post: Post
  deletedBy: DeletedBy!
  userId: Int!
  user: User
  mentionId: Int
  mention: User
  createdAt: DateTime!
  parentId: Int
  parent: Comment
  children: [Comment]
  text: String
  commentType: CommentType!
  contentAddress: String
  isEdited: Boolean!
  likeCount: Int!
  likeComments: [LikeComment]
  notifications: [Notification]
  reports: [Report]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

enum CommentType {
  TEXT
  PHOTO
  VIDEO
  VOICE
  FILE
  LINK
}

enum ArticleType {
  REGULAR_ARTICLE
}

"""
The built-in `Decimal` scalar type.
"""
scalar Decimal

enum PostType {
  REGULAR_POST
  ADS
  REELS
}

type InterestedUser {
  followerUser: User
  followersUserId: Int!
  userId: Int!
  user: User
  interestedUserType: InterestedUserType!
  post: Post
  postId: Int
  article: Article
  articleId: Int
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type Conversation {
  firstUserId: Int
  secondUserId: Int
  isFirstUserDeleted: Boolean!
  firstUserDeletedDate: DateTime!
  isSecondUserDeleted: Boolean!
  secondUserDeletedDate: DateTime!
  latestMessageUserId: Int!
  admin: User
  adminId: Int
  isGroup: Boolean!
  groupName: String
  groupDescription: String
  groupLink: String
  groupImgageUrl: String
  isPrivate: Boolean!
  latestMessageDate: DateTime
  userGroups: [UserMessageGroup]
  userSearchGroups: [UserSearchGroup]
  firstUser: User
  secondUser: User
  firstUnreadCount: Int!
  secondUnreadCount: Int!
  messages: [Message]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type NotInterestedArticle {
  article: Article
  articleId: Int!
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type EphemeralKeyDto {
  id: String
  object: String
  created: DateTime!
  deleted: Boolean
  expires: DateTime!
  livemode: Boolean!
  secret: String
  rawJson: String
}

input UserClaimsViewModelInput {
  type: String
  value: String
  selected: Boolean!
}

type Post {
  comments: [Comment]
  posterId: Int!
  poster: User
  postedAt: DateTime!
  likes: [PostLikes]
  isPromote: Boolean!
  latestPromoteDate: DateTime
  isCompletedPayment: Boolean!
  yourMind: String
  deletedBy: DeletedBy!
  allowDownload: Boolean!
  location: String
  isPin: Boolean!
  pinDate: DateTime!
  postType: PostType!
  isByAdmin: Boolean!
  hits: Int!
  thisWeekHits: Int!
  savePostsCount: Int!
  thisWeekSavePostsCount: Int!
  commentsCount: Int!
  thisWeekCommentsCount: Int!
  likesCount: Int!
  thisWeekLikesCount: Int!
  notInterestedPostsCount: Int!
  thisWeekNotInterestedPostsCount: Int!
  shareCount: Int!
  thisWeekShareCount: Int!
  latestUpdateThisWeeks: DateTime!
  isEdited: Boolean!
  isCreatedInGroup: Boolean!
  warningBanners: [WarningBanner]
  userViewPosts: [UserViewPost]
  stories: [Story]
  savePosts: [SavePost]
  postItemsString: String
  adses: [Ads]
  userSearchPosts: [UserSearchPost]
  messages: [Message]
  notInterestedPosts: [NotInterestedPost]
  interestedUsers: [InterestedUser]
  reports: [Report]
  tags: [String]
  stringTags: String
  userVisitLinks: [UserVisitLink]
  links: [Link]
  notifications: [Notification]
  strikes: [Strike]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

input LinkInput {
  id: Int
  text: String!
  url: String!
  postId: Int
  articleId: Int
  linkType: LinkType!
}

type PostAdsDto {
  post: Post
  clientSecret: String
}

input PostItemInput {
  order: Int!
  thumNail: String!
  content: String!
  summaryVideoLink: String
  videoShape: String
  videoTime: String
  postItemType: PostItemType!
  width: Float!
  height: Float!
}

enum ManualStatus {
  MANUAL
  AUTOMATE
}

enum TargetGender {
  MALE
  FEMALE
  RATHER_NOT_SAY
}

enum VisitType {
  WEBSITE_VISIT
  USER_PROFILE_VISIT
}

type PostLikes {
  userId: Int!
  user: User
  postId: Int!
  post: Post
  liked: Boolean!
  notifications: [Notification]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

enum DeletedBy {
  NOT_DELETED
  USER
  ADMIN
}

enum StoryType {
  IMAGE
  VIDEO
  TEXT
  POST
  ARTICLE
}

enum ReportType {
  POST
  ARTICLE
  POST_COMMENT
  ARTICLE_COMMENT
  OTHER_USER
  MESSAGE
}

type SecretMessage {
  secretConversationId: Int!
  secretConversation: SecretConversation
  senderId: Int!
  sender: User
  aesEncryptedText: String
  aesKeyEncryptedByRsaUsingSenderPublicKey: String
  aesIvEncryptedByRsaUsingSenderPublicKey: String
  aesKeyEncryptedByRsaUsingReceiverPublicKey: String
  aesIvEncryptedByRsaUsingReceiverPublicKey: String
  isSenderDeleted: Boolean!
  isReceiverDeleted: Boolean!
  aesEncryptedMessageType: String
  aesEncryptedContentAddress: String
  isSeen: Boolean!
  seenDate: DateTime
  receiverId: Int
  receiver: User
  aesEncryptedProfile: String
  aesEncryptedPost: String
  aesEncryptedArticle: String
  aesEncryptedStory: String
  parentSecretMessage: SecretMessage
  parentMessageId: Int
  childrenMessages: [SecretMessage]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type SecretConversation {
  isFirstUserDeleted: Boolean!
  firstUserDeletedDate: DateTime!
  isSecondUserDeleted: Boolean!
  secondUserDeletedDate: DateTime!
  latestMessageUserId: Int!
  latestMessageDate: DateTime
  isBothUserJoinedToChat: Boolean!
  firstUserId: Int!
  firstUser: User
  firstUserPublicKey: String
  secondUnreadCount: Int!
  secondUserId: Int!
  secondUser: User
  secondUserPublicKey: String
  firstUnreadCount: Int!
  isSelfDestruct: Boolean!
  selfDestructTime: DateTime
  secretMessages: [SecretMessage]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type Story {
  contentAddress: String
  storyType: StoryType!
  link: String
  text: String
  deletedBy: DeletedBy!
  highLight: HighLight
  highLightId: Int
  post: Post
  postId: Int
  article: Article
  articleId: Int
  duration: Int
  storyComments: [StoryComment]
  storyLikes: [StoryLike]
  storySeens: [StorySeen]
  messages: [Message]
  notifications: [Notification]
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

enum Gender {
  MALE
  FEMALE
  RATHER_NOT_SAY
  CUSTOM
}

type UsersSubscription {
  expirationDate: DateTime!
  status: UserSubscriptionStatuses!
  subscriptionPlanId: Int!
  subscriptionPlan: SubscriptionPlan
  paymentId: Int!
  payment: Payment
  userId: Int!
  user: User
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type Tokens {
  access_Token: String
  refresh_Token: String
  validTo: DateTime!
}

type SubscriptionPlan {
  priceId: String
  price: Float!
  isActive: Boolean!
  title: String
  content: String
  durationDays: Int!
  supportbadge: Boolean!
  removeAds: Boolean!
  allowDownloadPost: Boolean!
  addedToCouncilGroup: Boolean!
  usersSubscriptions: [UsersSubscription]
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

enum PostItemType {
  TEXT
  IMAGE
  VIDEO
  GIF
  CITATIONS
}

type ArticleItem {
  data: String
  order: Int!
  videoTime: String
  videoShape: String
  articleItemType: ArticleItemType!
}

type Settings {
  totalPostsCount: Int!
  totalArticlesCount: Int!
  totalPostCommentsCount: Int!
  totalArticleCommentsCount: Int!
  totalTagsCount: Int!
  totalTagsViews: Int!
  totalPostLikesCount: Int!
  totalArticleLikesCount: Int!
  totalPromotedPostsCount: Int!
  totalPromotedArticlesCount: Int!
  totalAdsesCount: Int!
  totalStoriesCount: Int!
  id: Int!
  isDeleted: Boolean!
  createdDate: DateTime!
  lastModifiedDate: DateTime
}

type TopTagLikesCount {
  likeCount: Int!
  tag: String
}

type TopTagUsesCount {
  usesCount: Int!
  tag: String
}

type Top5Tags {
  totalTagsView: Int!
  topTags: [TopTag]
}

type TopTag {
  viewCount: Int!
  tag: String
}
